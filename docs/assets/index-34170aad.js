(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))n(o);new MutationObserver(o=>{for(const l of o)if(l.type==="childList")for(const r of l.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function t(o){const l={};return o.integrity&&(l.integrity=o.integrity),o.referrerpolicy&&(l.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?l.credentials="include":o.crossorigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function n(o){if(o.ep)return;o.ep=!0;const l=t(o);fetch(o.href,l)}})();function Nt(e,s){const t=Object.create(null),n=e.split(",");for(let o=0;o<n.length;o++)t[n[o]]=!0;return s?o=>!!t[o.toLowerCase()]:o=>!!t[o]}function Jt(e){if(A(e)){const s={};for(let t=0;t<e.length;t++){const n=e[t],o=se(n)?Yo(n):Jt(n);if(o)for(const l in o)s[l]=o[l]}return s}else{if(se(e))return e;if(V(e))return e}}const Ko=/;(?![^(]*\))/g,Go=/:([^]+)/,Qo=/\/\*.*?\*\//gs;function Yo(e){const s={};return e.replace(Qo,"").split(Ko).forEach(t=>{if(t){const n=t.split(Go);n.length>1&&(s[n[0].trim()]=n[1].trim())}}),s}function cs(e){let s="";if(se(e))s=e;else if(A(e))for(let t=0;t<e.length;t++){const n=cs(e[t]);n&&(s+=n+" ")}else if(V(e))for(const t in e)e[t]&&(s+=t+" ");return s.trim()}const Zo="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",el=Nt(Zo);function Qn(e){return!!e||e===""}function sl(e,s){if(e.length!==s.length)return!1;let t=!0;for(let n=0;t&&n<e.length;n++)t=et(e[n],s[n]);return t}function et(e,s){if(e===s)return!0;let t=bn(e),n=bn(s);if(t||n)return t&&n?e.getTime()===s.getTime():!1;if(t=xs(e),n=xs(s),t||n)return e===s;if(t=A(e),n=A(s),t||n)return t&&n?sl(e,s):!1;if(t=V(e),n=V(s),t||n){if(!t||!n)return!1;const o=Object.keys(e).length,l=Object.keys(s).length;if(o!==l)return!1;for(const r in e){const a=e.hasOwnProperty(r),c=s.hasOwnProperty(r);if(a&&!c||!a&&c||!et(e[r],s[r]))return!1}}return String(e)===String(s)}function tl(e,s){return e.findIndex(t=>et(t,s))}const nl=e=>se(e)?e:e==null?"":A(e)||V(e)&&(e.toString===eo||!j(e.toString))?JSON.stringify(e,Yn,2):String(e),Yn=(e,s)=>s&&s.__v_isRef?Yn(e,s.value):ds(s)?{[`Map(${s.size})`]:[...s.entries()].reduce((t,[n,o])=>(t[`${n} =>`]=o,t),{})}:tt(s)?{[`Set(${s.size})`]:[...s.values()]}:V(s)&&!A(s)&&!so(s)?String(s):s,W={},ps=[],qe=()=>{},ol=()=>!1,ll=/^on[^a-z]/,st=e=>ll.test(e),zt=e=>e.startsWith("onUpdate:"),le=Object.assign,Ut=(e,s)=>{const t=e.indexOf(s);t>-1&&e.splice(t,1)},rl=Object.prototype.hasOwnProperty,F=(e,s)=>rl.call(e,s),A=Array.isArray,ds=e=>Rs(e)==="[object Map]",tt=e=>Rs(e)==="[object Set]",bn=e=>Rs(e)==="[object Date]",j=e=>typeof e=="function",se=e=>typeof e=="string",xs=e=>typeof e=="symbol",V=e=>e!==null&&typeof e=="object",Zn=e=>V(e)&&j(e.then)&&j(e.catch),eo=Object.prototype.toString,Rs=e=>eo.call(e),al=e=>Rs(e).slice(8,-1),so=e=>Rs(e)==="[object Object]",Xt=e=>se(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Fs=Nt(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),nt=e=>{const s=Object.create(null);return t=>s[t]||(s[t]=e(t))},il=/-(\w)/g,Ae=nt(e=>e.replace(il,(s,t)=>t?t.toUpperCase():"")),cl=/\B([A-Z])/g,ms=nt(e=>e.replace(cl,"-$1").toLowerCase()),ot=nt(e=>e.charAt(0).toUpperCase()+e.slice(1)),_t=nt(e=>e?`on${ot(e)}`:""),Xs=(e,s)=>!Object.is(e,s),Hs=(e,s)=>{for(let t=0;t<e.length;t++)e[t](s)},Ws=(e,s,t)=>{Object.defineProperty(e,s,{configurable:!0,enumerable:!1,value:t})},Vs=e=>{const s=parseFloat(e);return isNaN(s)?e:s};let wn;const pl=()=>wn||(wn=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});let ve;class dl{constructor(s=!1){this.detached=s,this._active=!0,this.effects=[],this.cleanups=[],this.parent=ve,!s&&ve&&(this.index=(ve.scopes||(ve.scopes=[])).push(this)-1)}get active(){return this._active}run(s){if(this._active){const t=ve;try{return ve=this,s()}finally{ve=t}}}on(){ve=this}off(){ve=this.parent}stop(s){if(this._active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!s){const o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.parent=void 0,this._active=!1}}}function ul(e,s=ve){s&&s.active&&s.effects.push(e)}function fl(){return ve}const Wt=e=>{const s=new Set(e);return s.w=0,s.n=0,s},to=e=>(e.w&ze)>0,no=e=>(e.n&ze)>0,hl=({deps:e})=>{if(e.length)for(let s=0;s<e.length;s++)e[s].w|=ze},yl=e=>{const{deps:s}=e;if(s.length){let t=0;for(let n=0;n<s.length;n++){const o=s[n];to(o)&&!no(o)?o.delete(e):s[t++]=o,o.w&=~ze,o.n&=~ze}s.length=t}},St=new WeakMap;let $s=0,ze=1;const Tt=30;let we;const ts=Symbol(""),Ct=Symbol("");class Vt{constructor(s,t=null,n){this.fn=s,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,ul(this,n)}run(){if(!this.active)return this.fn();let s=we,t=Ne;for(;s;){if(s===this)return;s=s.parent}try{return this.parent=we,we=this,Ne=!0,ze=1<<++$s,$s<=Tt?hl(this):$n(this),this.fn()}finally{$s<=Tt&&yl(this),ze=1<<--$s,we=this.parent,Ne=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){we===this?this.deferStop=!0:this.active&&($n(this),this.onStop&&this.onStop(),this.active=!1)}}function $n(e){const{deps:s}=e;if(s.length){for(let t=0;t<s.length;t++)s[t].delete(e);s.length=0}}let Ne=!0;const oo=[];function gs(){oo.push(Ne),Ne=!1}function _s(){const e=oo.pop();Ne=e===void 0?!0:e}function de(e,s,t){if(Ne&&we){let n=St.get(e);n||St.set(e,n=new Map);let o=n.get(t);o||n.set(t,o=Wt()),lo(o)}}function lo(e,s){let t=!1;$s<=Tt?no(e)||(e.n|=ze,t=!to(e)):t=!e.has(we),t&&(e.add(we),we.deps.push(e))}function Ie(e,s,t,n,o,l){const r=St.get(e);if(!r)return;let a=[];if(s==="clear")a=[...r.values()];else if(t==="length"&&A(e)){const c=Number(n);r.forEach((h,v)=>{(v==="length"||v>=c)&&a.push(h)})}else switch(t!==void 0&&a.push(r.get(t)),s){case"add":A(e)?Xt(t)&&a.push(r.get("length")):(a.push(r.get(ts)),ds(e)&&a.push(r.get(Ct)));break;case"delete":A(e)||(a.push(r.get(ts)),ds(e)&&a.push(r.get(Ct)));break;case"set":ds(e)&&a.push(r.get(ts));break}if(a.length===1)a[0]&&Et(a[0]);else{const c=[];for(const h of a)h&&c.push(...h);Et(Wt(c))}}function Et(e,s){const t=A(e)?e:[...e];for(const n of t)n.computed&&qn(n);for(const n of t)n.computed||qn(n)}function qn(e,s){(e!==we||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const ml=Nt("__proto__,__v_isRef,__isVue"),ro=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(xs)),gl=Kt(),_l=Kt(!1,!0),vl=Kt(!0),Pn=bl();function bl(){const e={};return["includes","indexOf","lastIndexOf"].forEach(s=>{e[s]=function(...t){const n=H(this);for(let l=0,r=this.length;l<r;l++)de(n,"get",l+"");const o=n[s](...t);return o===-1||o===!1?n[s](...t.map(H)):o}}),["push","pop","shift","unshift","splice"].forEach(s=>{e[s]=function(...t){gs();const n=H(this)[s].apply(this,t);return _s(),n}}),e}function wl(e){const s=H(this);return de(s,"has",e),s.hasOwnProperty(e)}function Kt(e=!1,s=!1){return function(n,o,l){if(o==="__v_isReactive")return!e;if(o==="__v_isReadonly")return e;if(o==="__v_isShallow")return s;if(o==="__v_raw"&&l===(e?s?Il:uo:s?po:co).get(n))return n;const r=A(n);if(!e){if(r&&F(Pn,o))return Reflect.get(Pn,o,l);if(o==="hasOwnProperty")return wl}const a=Reflect.get(n,o,l);return(xs(o)?ro.has(o):ml(o))||(e||de(n,"get",o),s)?a:ie(a)?r&&Xt(o)?a:a.value:V(a)?e?fo(a):Yt(a):a}}const $l=ao(),ql=ao(!0);function ao(e=!1){return function(t,n,o,l){let r=t[n];if(Ss(r)&&ie(r)&&!ie(o))return!1;if(!e&&(!kt(o)&&!Ss(o)&&(r=H(r),o=H(o)),!A(t)&&ie(r)&&!ie(o)))return r.value=o,!0;const a=A(t)&&Xt(n)?Number(n)<t.length:F(t,n),c=Reflect.set(t,n,o,l);return t===H(l)&&(a?Xs(o,r)&&Ie(t,"set",n,o):Ie(t,"add",n,o)),c}}function Pl(e,s){const t=F(e,s);e[s];const n=Reflect.deleteProperty(e,s);return n&&t&&Ie(e,"delete",s,void 0),n}function xl(e,s){const t=Reflect.has(e,s);return(!xs(s)||!ro.has(s))&&de(e,"has",s),t}function Sl(e){return de(e,"iterate",A(e)?"length":ts),Reflect.ownKeys(e)}const io={get:gl,set:$l,deleteProperty:Pl,has:xl,ownKeys:Sl},Tl={get:vl,set(e,s){return!0},deleteProperty(e,s){return!0}},Cl=le({},io,{get:_l,set:ql}),Gt=e=>e,lt=e=>Reflect.getPrototypeOf(e);function Ds(e,s,t=!1,n=!1){e=e.__v_raw;const o=H(e),l=H(s);t||(s!==l&&de(o,"get",s),de(o,"get",l));const{has:r}=lt(o),a=n?Gt:t?sn:en;if(r.call(o,s))return a(e.get(s));if(r.call(o,l))return a(e.get(l));e!==o&&e.get(s)}function Ls(e,s=!1){const t=this.__v_raw,n=H(t),o=H(e);return s||(e!==o&&de(n,"has",e),de(n,"has",o)),e===o?t.has(e):t.has(e)||t.has(o)}function js(e,s=!1){return e=e.__v_raw,!s&&de(H(e),"iterate",ts),Reflect.get(e,"size",e)}function xn(e){e=H(e);const s=H(this);return lt(s).has.call(s,e)||(s.add(e),Ie(s,"add",e,e)),this}function Sn(e,s){s=H(s);const t=H(this),{has:n,get:o}=lt(t);let l=n.call(t,e);l||(e=H(e),l=n.call(t,e));const r=o.call(t,e);return t.set(e,s),l?Xs(s,r)&&Ie(t,"set",e,s):Ie(t,"add",e,s),this}function Tn(e){const s=H(this),{has:t,get:n}=lt(s);let o=t.call(s,e);o||(e=H(e),o=t.call(s,e)),n&&n.call(s,e);const l=s.delete(e);return o&&Ie(s,"delete",e,void 0),l}function Cn(){const e=H(this),s=e.size!==0,t=e.clear();return s&&Ie(e,"clear",void 0,void 0),t}function Is(e,s){return function(n,o){const l=this,r=l.__v_raw,a=H(r),c=s?Gt:e?sn:en;return!e&&de(a,"iterate",ts),r.forEach((h,v)=>n.call(o,c(h),c(v),l))}}function Ms(e,s,t){return function(...n){const o=this.__v_raw,l=H(o),r=ds(l),a=e==="entries"||e===Symbol.iterator&&r,c=e==="keys"&&r,h=o[e](...n),v=t?Gt:s?sn:en;return!s&&de(l,"iterate",c?Ct:ts),{next(){const{value:x,done:C}=h.next();return C?{value:x,done:C}:{value:a?[v(x[0]),v(x[1])]:v(x),done:C}},[Symbol.iterator](){return this}}}}function Fe(e){return function(...s){return e==="delete"?!1:this}}function El(){const e={get(l){return Ds(this,l)},get size(){return js(this)},has:Ls,add:xn,set:Sn,delete:Tn,clear:Cn,forEach:Is(!1,!1)},s={get(l){return Ds(this,l,!1,!0)},get size(){return js(this)},has:Ls,add:xn,set:Sn,delete:Tn,clear:Cn,forEach:Is(!1,!0)},t={get(l){return Ds(this,l,!0)},get size(){return js(this,!0)},has(l){return Ls.call(this,l,!0)},add:Fe("add"),set:Fe("set"),delete:Fe("delete"),clear:Fe("clear"),forEach:Is(!0,!1)},n={get(l){return Ds(this,l,!0,!0)},get size(){return js(this,!0)},has(l){return Ls.call(this,l,!0)},add:Fe("add"),set:Fe("set"),delete:Fe("delete"),clear:Fe("clear"),forEach:Is(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(l=>{e[l]=Ms(l,!1,!1),t[l]=Ms(l,!0,!1),s[l]=Ms(l,!1,!0),n[l]=Ms(l,!0,!0)}),[e,t,s,n]}const[kl,Rl,Al,Bl]=El();function Qt(e,s){const t=s?e?Bl:Al:e?Rl:kl;return(n,o,l)=>o==="__v_isReactive"?!e:o==="__v_isReadonly"?e:o==="__v_raw"?n:Reflect.get(F(t,o)&&o in n?t:n,o,l)}const Dl={get:Qt(!1,!1)},Ll={get:Qt(!1,!0)},jl={get:Qt(!0,!1)},co=new WeakMap,po=new WeakMap,uo=new WeakMap,Il=new WeakMap;function Ml(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Ol(e){return e.__v_skip||!Object.isExtensible(e)?0:Ml(al(e))}function Yt(e){return Ss(e)?e:Zt(e,!1,io,Dl,co)}function Fl(e){return Zt(e,!1,Cl,Ll,po)}function fo(e){return Zt(e,!0,Tl,jl,uo)}function Zt(e,s,t,n,o){if(!V(e)||e.__v_raw&&!(s&&e.__v_isReactive))return e;const l=o.get(e);if(l)return l;const r=Ol(e);if(r===0)return e;const a=new Proxy(e,r===2?n:t);return o.set(e,a),a}function us(e){return Ss(e)?us(e.__v_raw):!!(e&&e.__v_isReactive)}function Ss(e){return!!(e&&e.__v_isReadonly)}function kt(e){return!!(e&&e.__v_isShallow)}function ho(e){return us(e)||Ss(e)}function H(e){const s=e&&e.__v_raw;return s?H(s):e}function yo(e){return Ws(e,"__v_skip",!0),e}const en=e=>V(e)?Yt(e):e,sn=e=>V(e)?fo(e):e;function Hl(e){Ne&&we&&(e=H(e),lo(e.dep||(e.dep=Wt())))}function Nl(e,s){e=H(e);const t=e.dep;t&&Et(t)}function ie(e){return!!(e&&e.__v_isRef===!0)}function Jl(e){return ie(e)?e.value:e}const zl={get:(e,s,t)=>Jl(Reflect.get(e,s,t)),set:(e,s,t,n)=>{const o=e[s];return ie(o)&&!ie(t)?(o.value=t,!0):Reflect.set(e,s,t,n)}};function mo(e){return us(e)?e:new Proxy(e,zl)}var go;class Ul{constructor(s,t,n,o){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this[go]=!1,this._dirty=!0,this.effect=new Vt(s,()=>{this._dirty||(this._dirty=!0,Nl(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=n}get value(){const s=H(this);return Hl(s),(s._dirty||!s._cacheable)&&(s._dirty=!1,s._value=s.effect.run()),s._value}set value(s){this._setter(s)}}go="__v_isReadonly";function Xl(e,s,t=!1){let n,o;const l=j(e);return l?(n=e,o=qe):(n=e.get,o=e.set),new Ul(n,o,l||!o,t)}function Je(e,s,t,n){let o;try{o=n?e(...n):e()}catch(l){rt(l,s,t)}return o}function ge(e,s,t,n){if(j(e)){const l=Je(e,s,t,n);return l&&Zn(l)&&l.catch(r=>{rt(r,s,t)}),l}const o=[];for(let l=0;l<e.length;l++)o.push(ge(e[l],s,t,n));return o}function rt(e,s,t,n=!0){const o=s?s.vnode:null;if(s){let l=s.parent;const r=s.proxy,a=t;for(;l;){const h=l.ec;if(h){for(let v=0;v<h.length;v++)if(h[v](e,r,a)===!1)return}l=l.parent}const c=s.appContext.config.errorHandler;if(c){Je(c,null,10,[e,r,a]);return}}Wl(e,t,o,n)}function Wl(e,s,t,n=!0){console.error(e)}let Ts=!1,Rt=!1;const oe=[];let ke=0;const fs=[];let Le=null,Qe=0;const _o=Promise.resolve();let tn=null;function Vl(e){const s=tn||_o;return e?s.then(this?e.bind(this):e):s}function Kl(e){let s=ke+1,t=oe.length;for(;s<t;){const n=s+t>>>1;Cs(oe[n])<e?s=n+1:t=n}return s}function nn(e){(!oe.length||!oe.includes(e,Ts&&e.allowRecurse?ke+1:ke))&&(e.id==null?oe.push(e):oe.splice(Kl(e.id),0,e),vo())}function vo(){!Ts&&!Rt&&(Rt=!0,tn=_o.then(wo))}function Gl(e){const s=oe.indexOf(e);s>ke&&oe.splice(s,1)}function Ql(e){A(e)?fs.push(...e):(!Le||!Le.includes(e,e.allowRecurse?Qe+1:Qe))&&fs.push(e),vo()}function En(e,s=Ts?ke+1:0){for(;s<oe.length;s++){const t=oe[s];t&&t.pre&&(oe.splice(s,1),s--,t())}}function bo(e){if(fs.length){const s=[...new Set(fs)];if(fs.length=0,Le){Le.push(...s);return}for(Le=s,Le.sort((t,n)=>Cs(t)-Cs(n)),Qe=0;Qe<Le.length;Qe++)Le[Qe]();Le=null,Qe=0}}const Cs=e=>e.id==null?1/0:e.id,Yl=(e,s)=>{const t=Cs(e)-Cs(s);if(t===0){if(e.pre&&!s.pre)return-1;if(s.pre&&!e.pre)return 1}return t};function wo(e){Rt=!1,Ts=!0,oe.sort(Yl);const s=qe;try{for(ke=0;ke<oe.length;ke++){const t=oe[ke];t&&t.active!==!1&&Je(t,null,14)}}finally{ke=0,oe.length=0,bo(),Ts=!1,tn=null,(oe.length||fs.length)&&wo()}}function Zl(e,s,...t){if(e.isUnmounted)return;const n=e.vnode.props||W;let o=t;const l=s.startsWith("update:"),r=l&&s.slice(7);if(r&&r in n){const v=`${r==="modelValue"?"model":r}Modifiers`,{number:x,trim:C}=n[v]||W;C&&(o=t.map(L=>se(L)?L.trim():L)),x&&(o=t.map(Vs))}let a,c=n[a=_t(s)]||n[a=_t(Ae(s))];!c&&l&&(c=n[a=_t(ms(s))]),c&&ge(c,e,6,o);const h=n[a+"Once"];if(h){if(!e.emitted)e.emitted={};else if(e.emitted[a])return;e.emitted[a]=!0,ge(h,e,6,o)}}function $o(e,s,t=!1){const n=s.emitsCache,o=n.get(e);if(o!==void 0)return o;const l=e.emits;let r={},a=!1;if(!j(e)){const c=h=>{const v=$o(h,s,!0);v&&(a=!0,le(r,v))};!t&&s.mixins.length&&s.mixins.forEach(c),e.extends&&c(e.extends),e.mixins&&e.mixins.forEach(c)}return!l&&!a?(V(e)&&n.set(e,null),null):(A(l)?l.forEach(c=>r[c]=null):le(r,l),V(e)&&n.set(e,r),r)}function at(e,s){return!e||!st(s)?!1:(s=s.slice(2).replace(/Once$/,""),F(e,s[0].toLowerCase()+s.slice(1))||F(e,ms(s))||F(e,s))}let he=null,it=null;function Ks(e){const s=he;return he=e,it=e&&e.type.__scopeId||null,s}function er(e){it=e}function sr(){it=null}function tr(e,s=he,t){if(!s||e._n)return e;const n=(...o)=>{n._d&&On(-1);const l=Ks(s);let r;try{r=e(...o)}finally{Ks(l),n._d&&On(1)}return r};return n._n=!0,n._c=!0,n._d=!0,n}function vt(e){const{type:s,vnode:t,proxy:n,withProxy:o,props:l,propsOptions:[r],slots:a,attrs:c,emit:h,render:v,renderCache:x,data:C,setupState:L,ctx:N,inheritAttrs:B}=e;let Z,z;const ye=Ks(e);try{if(t.shapeFlag&4){const K=o||n;Z=Ee(v.call(K,K,x,l,L,C,N)),z=c}else{const K=s;Z=Ee(K.length>1?K(l,{attrs:c,slots:a,emit:h}):K(l,null)),z=s.props?c:nr(c)}}catch(K){Ps.length=0,rt(K,e,1),Z=f(je)}let I=Z;if(z&&B!==!1){const K=Object.keys(z),{shapeFlag:ne}=I;K.length&&ne&7&&(r&&K.some(zt)&&(z=or(z,r)),I=Ue(I,z))}return t.dirs&&(I=Ue(I),I.dirs=I.dirs?I.dirs.concat(t.dirs):t.dirs),t.transition&&(I.transition=t.transition),Z=I,Ks(ye),Z}const nr=e=>{let s;for(const t in e)(t==="class"||t==="style"||st(t))&&((s||(s={}))[t]=e[t]);return s},or=(e,s)=>{const t={};for(const n in e)(!zt(n)||!(n.slice(9)in s))&&(t[n]=e[n]);return t};function lr(e,s,t){const{props:n,children:o,component:l}=e,{props:r,children:a,patchFlag:c}=s,h=l.emitsOptions;if(s.dirs||s.transition)return!0;if(t&&c>=0){if(c&1024)return!0;if(c&16)return n?kn(n,r,h):!!r;if(c&8){const v=s.dynamicProps;for(let x=0;x<v.length;x++){const C=v[x];if(r[C]!==n[C]&&!at(h,C))return!0}}}else return(o||a)&&(!a||!a.$stable)?!0:n===r?!1:n?r?kn(n,r,h):!0:!!r;return!1}function kn(e,s,t){const n=Object.keys(s);if(n.length!==Object.keys(e).length)return!0;for(let o=0;o<n.length;o++){const l=n[o];if(s[l]!==e[l]&&!at(t,l))return!0}return!1}function rr({vnode:e,parent:s},t){for(;s&&s.subTree===e;)(e=s.vnode).el=t,s=s.parent}const ar=e=>e.__isSuspense;function ir(e,s){s&&s.pendingBranch?A(e)?s.effects.push(...e):s.effects.push(e):Ql(e)}function cr(e,s){if(Y){let t=Y.provides;const n=Y.parent&&Y.parent.provides;n===t&&(t=Y.provides=Object.create(n)),t[e]=s}}function Ns(e,s,t=!1){const n=Y||he;if(n){const o=n.parent==null?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides;if(o&&e in o)return o[e];if(arguments.length>1)return t&&j(s)?s.call(n.proxy):s}}const Os={};function bt(e,s,t){return qo(e,s,t)}function qo(e,s,{immediate:t,deep:n,flush:o,onTrack:l,onTrigger:r}=W){const a=fl()===(Y==null?void 0:Y.scope)?Y:null;let c,h=!1,v=!1;if(ie(e)?(c=()=>e.value,h=kt(e)):us(e)?(c=()=>e,n=!0):A(e)?(v=!0,h=e.some(I=>us(I)||kt(I)),c=()=>e.map(I=>{if(ie(I))return I.value;if(us(I))return ss(I);if(j(I))return Je(I,a,2)})):j(e)?s?c=()=>Je(e,a,2):c=()=>{if(!(a&&a.isUnmounted))return x&&x(),ge(e,a,3,[C])}:c=qe,s&&n){const I=c;c=()=>ss(I())}let x,C=I=>{x=z.onStop=()=>{Je(I,a,4)}},L;if(ks)if(C=qe,s?t&&ge(s,a,3,[c(),v?[]:void 0,C]):c(),o==="sync"){const I=ia();L=I.__watcherHandles||(I.__watcherHandles=[])}else return qe;let N=v?new Array(e.length).fill(Os):Os;const B=()=>{if(z.active)if(s){const I=z.run();(n||h||(v?I.some((K,ne)=>Xs(K,N[ne])):Xs(I,N)))&&(x&&x(),ge(s,a,3,[I,N===Os?void 0:v&&N[0]===Os?[]:N,C]),N=I)}else z.run()};B.allowRecurse=!!s;let Z;o==="sync"?Z=B:o==="post"?Z=()=>ce(B,a&&a.suspense):(B.pre=!0,a&&(B.id=a.uid),Z=()=>nn(B));const z=new Vt(c,Z);s?t?B():N=z.run():o==="post"?ce(z.run.bind(z),a&&a.suspense):z.run();const ye=()=>{z.stop(),a&&a.scope&&Ut(a.scope.effects,z)};return L&&L.push(ye),ye}function pr(e,s,t){const n=this.proxy,o=se(e)?e.includes(".")?Po(n,e):()=>n[e]:e.bind(n,n);let l;j(s)?l=s:(l=s.handler,t=s);const r=Y;ys(this);const a=qo(o,l.bind(n),t);return r?ys(r):ns(),a}function Po(e,s){const t=s.split(".");return()=>{let n=e;for(let o=0;o<t.length&&n;o++)n=n[t[o]];return n}}function ss(e,s){if(!V(e)||e.__v_skip||(s=s||new Set,s.has(e)))return e;if(s.add(e),ie(e))ss(e.value,s);else if(A(e))for(let t=0;t<e.length;t++)ss(e[t],s);else if(tt(e)||ds(e))e.forEach(t=>{ss(t,s)});else if(so(e))for(const t in e)ss(e[t],s);return e}function dr(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Co(()=>{e.isMounted=!0}),Eo(()=>{e.isUnmounting=!0}),e}const me=[Function,Array],ur={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:me,onEnter:me,onAfterEnter:me,onEnterCancelled:me,onBeforeLeave:me,onLeave:me,onAfterLeave:me,onLeaveCancelled:me,onBeforeAppear:me,onAppear:me,onAfterAppear:me,onAppearCancelled:me},setup(e,{slots:s}){const t=Zr(),n=dr();let o;return()=>{const l=s.default&&So(s.default(),!0);if(!l||!l.length)return;let r=l[0];if(l.length>1){for(const B of l)if(B.type!==je){r=B;break}}const a=H(e),{mode:c}=a;if(n.isLeaving)return wt(r);const h=Rn(r);if(!h)return wt(r);const v=At(h,a,n,t);Bt(h,v);const x=t.subTree,C=x&&Rn(x);let L=!1;const{getTransitionKey:N}=h.type;if(N){const B=N();o===void 0?o=B:B!==o&&(o=B,L=!0)}if(C&&C.type!==je&&(!Ye(h,C)||L)){const B=At(C,a,n,t);if(Bt(C,B),c==="out-in")return n.isLeaving=!0,B.afterLeave=()=>{n.isLeaving=!1,t.update.active!==!1&&t.update()},wt(r);c==="in-out"&&h.type!==je&&(B.delayLeave=(Z,z,ye)=>{const I=xo(n,C);I[String(C.key)]=C,Z._leaveCb=()=>{z(),Z._leaveCb=void 0,delete v.delayedLeave},v.delayedLeave=ye})}return r}}},fr=ur;function xo(e,s){const{leavingVNodes:t}=e;let n=t.get(s.type);return n||(n=Object.create(null),t.set(s.type,n)),n}function At(e,s,t,n){const{appear:o,mode:l,persisted:r=!1,onBeforeEnter:a,onEnter:c,onAfterEnter:h,onEnterCancelled:v,onBeforeLeave:x,onLeave:C,onAfterLeave:L,onLeaveCancelled:N,onBeforeAppear:B,onAppear:Z,onAfterAppear:z,onAppearCancelled:ye}=s,I=String(e.key),K=xo(t,e),ne=(M,te)=>{M&&ge(M,n,9,te)},ls=(M,te)=>{const G=te[1];ne(M,te),A(M)?M.every(ue=>ue.length<=1)&&G():M.length<=1&&G()},Oe={mode:l,persisted:r,beforeEnter(M){let te=a;if(!t.isMounted)if(o)te=B||a;else return;M._leaveCb&&M._leaveCb(!0);const G=K[I];G&&Ye(e,G)&&G.el._leaveCb&&G.el._leaveCb(),ne(te,[M])},enter(M){let te=c,G=h,ue=v;if(!t.isMounted)if(o)te=Z||c,G=z||h,ue=ye||v;else return;let xe=!1;const Be=M._enterCb=vs=>{xe||(xe=!0,vs?ne(ue,[M]):ne(G,[M]),Oe.delayedLeave&&Oe.delayedLeave(),M._enterCb=void 0)};te?ls(te,[M,Be]):Be()},leave(M,te){const G=String(e.key);if(M._enterCb&&M._enterCb(!0),t.isUnmounting)return te();ne(x,[M]);let ue=!1;const xe=M._leaveCb=Be=>{ue||(ue=!0,te(),Be?ne(N,[M]):ne(L,[M]),M._leaveCb=void 0,K[G]===e&&delete K[G])};K[G]=e,C?ls(C,[M,xe]):xe()},clone(M){return At(M,s,t,n)}};return Oe}function wt(e){if(ct(e))return e=Ue(e),e.children=null,e}function Rn(e){return ct(e)?e.children?e.children[0]:void 0:e}function Bt(e,s){e.shapeFlag&6&&e.component?Bt(e.component.subTree,s):e.shapeFlag&128?(e.ssContent.transition=s.clone(e.ssContent),e.ssFallback.transition=s.clone(e.ssFallback)):e.transition=s}function So(e,s=!1,t){let n=[],o=0;for(let l=0;l<e.length;l++){let r=e[l];const a=t==null?r.key:String(t)+String(r.key!=null?r.key:l);r.type===be?(r.patchFlag&128&&o++,n=n.concat(So(r.children,s,a))):(s||r.type!==je)&&n.push(a!=null?Ue(r,{key:a}):r)}if(o>1)for(let l=0;l<n.length;l++)n[l].patchFlag=-2;return n}const Js=e=>!!e.type.__asyncLoader,ct=e=>e.type.__isKeepAlive;function hr(e,s){To(e,"a",s)}function yr(e,s){To(e,"da",s)}function To(e,s,t=Y){const n=e.__wdc||(e.__wdc=()=>{let o=t;for(;o;){if(o.isDeactivated)return;o=o.parent}return e()});if(pt(s,n,t),t){let o=t.parent;for(;o&&o.parent;)ct(o.parent.vnode)&&mr(n,s,t,o),o=o.parent}}function mr(e,s,t,n){const o=pt(s,e,n,!0);ko(()=>{Ut(n[s],o)},t)}function pt(e,s,t=Y,n=!1){if(t){const o=t[e]||(t[e]=[]),l=s.__weh||(s.__weh=(...r)=>{if(t.isUnmounted)return;gs(),ys(t);const a=ge(s,t,e,r);return ns(),_s(),a});return n?o.unshift(l):o.push(l),l}}const Me=e=>(s,t=Y)=>(!ks||e==="sp")&&pt(e,(...n)=>s(...n),t),gr=Me("bm"),Co=Me("m"),_r=Me("bu"),vr=Me("u"),Eo=Me("bum"),ko=Me("um"),br=Me("sp"),wr=Me("rtg"),$r=Me("rtc");function qr(e,s=Y){pt("ec",e,s)}function Re(e,s){const t=he;if(t===null)return e;const n=ft(t)||t.proxy,o=e.dirs||(e.dirs=[]);for(let l=0;l<s.length;l++){let[r,a,c,h=W]=s[l];r&&(j(r)&&(r={mounted:r,updated:r}),r.deep&&ss(a),o.push({dir:r,instance:n,value:a,oldValue:void 0,arg:c,modifiers:h}))}return e}function Ve(e,s,t,n){const o=e.dirs,l=s&&s.dirs;for(let r=0;r<o.length;r++){const a=o[r];l&&(a.oldValue=l[r].value);let c=a.dir[n];c&&(gs(),ge(c,t,8,[e.el,a,e,s]),_s())}}const Ro="components";function Ao(e,s){return xr(Ro,e,!0,s)||e}const Pr=Symbol();function xr(e,s,t=!0,n=!1){const o=he||Y;if(o){const l=o.type;if(e===Ro){const a=oa(l,!1);if(a&&(a===s||a===Ae(s)||a===ot(Ae(s))))return l}const r=An(o[e]||l[e],s)||An(o.appContext[e],s);return!r&&n?l:r}}function An(e,s){return e&&(e[s]||e[Ae(s)]||e[ot(Ae(s))])}function Sr(e,s,t,n){let o;const l=t&&t[n];if(A(e)||se(e)){o=new Array(e.length);for(let r=0,a=e.length;r<a;r++)o[r]=s(e[r],r,void 0,l&&l[r])}else if(typeof e=="number"){o=new Array(e);for(let r=0;r<e;r++)o[r]=s(r+1,r,void 0,l&&l[r])}else if(V(e))if(e[Symbol.iterator])o=Array.from(e,(r,a)=>s(r,a,void 0,l&&l[a]));else{const r=Object.keys(e);o=new Array(r.length);for(let a=0,c=r.length;a<c;a++){const h=r[a];o[a]=s(e[h],h,a,l&&l[a])}}else o=[];return t&&(t[n]=o),o}const Dt=e=>e?No(e)?ft(e)||e.proxy:Dt(e.parent):null,qs=le(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Dt(e.parent),$root:e=>Dt(e.root),$emit:e=>e.emit,$options:e=>on(e),$forceUpdate:e=>e.f||(e.f=()=>nn(e.update)),$nextTick:e=>e.n||(e.n=Vl.bind(e.proxy)),$watch:e=>pr.bind(e)}),$t=(e,s)=>e!==W&&!e.__isScriptSetup&&F(e,s),Tr={get({_:e},s){const{ctx:t,setupState:n,data:o,props:l,accessCache:r,type:a,appContext:c}=e;let h;if(s[0]!=="$"){const L=r[s];if(L!==void 0)switch(L){case 1:return n[s];case 2:return o[s];case 4:return t[s];case 3:return l[s]}else{if($t(n,s))return r[s]=1,n[s];if(o!==W&&F(o,s))return r[s]=2,o[s];if((h=e.propsOptions[0])&&F(h,s))return r[s]=3,l[s];if(t!==W&&F(t,s))return r[s]=4,t[s];Lt&&(r[s]=0)}}const v=qs[s];let x,C;if(v)return s==="$attrs"&&de(e,"get",s),v(e);if((x=a.__cssModules)&&(x=x[s]))return x;if(t!==W&&F(t,s))return r[s]=4,t[s];if(C=c.config.globalProperties,F(C,s))return C[s]},set({_:e},s,t){const{data:n,setupState:o,ctx:l}=e;return $t(o,s)?(o[s]=t,!0):n!==W&&F(n,s)?(n[s]=t,!0):F(e.props,s)||s[0]==="$"&&s.slice(1)in e?!1:(l[s]=t,!0)},has({_:{data:e,setupState:s,accessCache:t,ctx:n,appContext:o,propsOptions:l}},r){let a;return!!t[r]||e!==W&&F(e,r)||$t(s,r)||(a=l[0])&&F(a,r)||F(n,r)||F(qs,r)||F(o.config.globalProperties,r)},defineProperty(e,s,t){return t.get!=null?e._.accessCache[s]=0:F(t,"value")&&this.set(e,s,t.value,null),Reflect.defineProperty(e,s,t)}};let Lt=!0;function Cr(e){const s=on(e),t=e.proxy,n=e.ctx;Lt=!1,s.beforeCreate&&Bn(s.beforeCreate,e,"bc");const{data:o,computed:l,methods:r,watch:a,provide:c,inject:h,created:v,beforeMount:x,mounted:C,beforeUpdate:L,updated:N,activated:B,deactivated:Z,beforeDestroy:z,beforeUnmount:ye,destroyed:I,unmounted:K,render:ne,renderTracked:ls,renderTriggered:Oe,errorCaptured:M,serverPrefetch:te,expose:G,inheritAttrs:ue,components:xe,directives:Be,filters:vs}=s;if(h&&Er(h,n,null,e.appContext.config.unwrapInjectedRef),r)for(const Q in r){const U=r[Q];j(U)&&(n[Q]=U.bind(t))}if(o){const Q=o.call(t,t);V(Q)&&(e.data=Yt(Q))}if(Lt=!0,l)for(const Q in l){const U=l[Q],Xe=j(U)?U.bind(t,t):j(U.get)?U.get.bind(t,t):qe,As=!j(U)&&j(U.set)?U.set.bind(t):qe,We=ra({get:Xe,set:As});Object.defineProperty(n,Q,{enumerable:!0,configurable:!0,get:()=>We.value,set:Se=>We.value=Se})}if(a)for(const Q in a)Bo(a[Q],n,t,Q);if(c){const Q=j(c)?c.call(t):c;Reflect.ownKeys(Q).forEach(U=>{cr(U,Q[U])})}v&&Bn(v,e,"c");function re(Q,U){A(U)?U.forEach(Xe=>Q(Xe.bind(t))):U&&Q(U.bind(t))}if(re(gr,x),re(Co,C),re(_r,L),re(vr,N),re(hr,B),re(yr,Z),re(qr,M),re($r,ls),re(wr,Oe),re(Eo,ye),re(ko,K),re(br,te),A(G))if(G.length){const Q=e.exposed||(e.exposed={});G.forEach(U=>{Object.defineProperty(Q,U,{get:()=>t[U],set:Xe=>t[U]=Xe})})}else e.exposed||(e.exposed={});ne&&e.render===qe&&(e.render=ne),ue!=null&&(e.inheritAttrs=ue),xe&&(e.components=xe),Be&&(e.directives=Be)}function Er(e,s,t=qe,n=!1){A(e)&&(e=jt(e));for(const o in e){const l=e[o];let r;V(l)?"default"in l?r=Ns(l.from||o,l.default,!0):r=Ns(l.from||o):r=Ns(l),ie(r)&&n?Object.defineProperty(s,o,{enumerable:!0,configurable:!0,get:()=>r.value,set:a=>r.value=a}):s[o]=r}}function Bn(e,s,t){ge(A(e)?e.map(n=>n.bind(s.proxy)):e.bind(s.proxy),s,t)}function Bo(e,s,t,n){const o=n.includes(".")?Po(t,n):()=>t[n];if(se(e)){const l=s[e];j(l)&&bt(o,l)}else if(j(e))bt(o,e.bind(t));else if(V(e))if(A(e))e.forEach(l=>Bo(l,s,t,n));else{const l=j(e.handler)?e.handler.bind(t):s[e.handler];j(l)&&bt(o,l,e)}}function on(e){const s=e.type,{mixins:t,extends:n}=s,{mixins:o,optionsCache:l,config:{optionMergeStrategies:r}}=e.appContext,a=l.get(s);let c;return a?c=a:!o.length&&!t&&!n?c=s:(c={},o.length&&o.forEach(h=>Gs(c,h,r,!0)),Gs(c,s,r)),V(s)&&l.set(s,c),c}function Gs(e,s,t,n=!1){const{mixins:o,extends:l}=s;l&&Gs(e,l,t,!0),o&&o.forEach(r=>Gs(e,r,t,!0));for(const r in s)if(!(n&&r==="expose")){const a=kr[r]||t&&t[r];e[r]=a?a(e[r],s[r]):s[r]}return e}const kr={data:Dn,props:Ge,emits:Ge,methods:Ge,computed:Ge,beforeCreate:ae,created:ae,beforeMount:ae,mounted:ae,beforeUpdate:ae,updated:ae,beforeDestroy:ae,beforeUnmount:ae,destroyed:ae,unmounted:ae,activated:ae,deactivated:ae,errorCaptured:ae,serverPrefetch:ae,components:Ge,directives:Ge,watch:Ar,provide:Dn,inject:Rr};function Dn(e,s){return s?e?function(){return le(j(e)?e.call(this,this):e,j(s)?s.call(this,this):s)}:s:e}function Rr(e,s){return Ge(jt(e),jt(s))}function jt(e){if(A(e)){const s={};for(let t=0;t<e.length;t++)s[e[t]]=e[t];return s}return e}function ae(e,s){return e?[...new Set([].concat(e,s))]:s}function Ge(e,s){return e?le(le(Object.create(null),e),s):s}function Ar(e,s){if(!e)return s;if(!s)return e;const t=le(Object.create(null),e);for(const n in s)t[n]=ae(e[n],s[n]);return t}function Br(e,s,t,n=!1){const o={},l={};Ws(l,ut,1),e.propsDefaults=Object.create(null),Do(e,s,o,l);for(const r in e.propsOptions[0])r in o||(o[r]=void 0);t?e.props=n?o:Fl(o):e.type.props?e.props=o:e.props=l,e.attrs=l}function Dr(e,s,t,n){const{props:o,attrs:l,vnode:{patchFlag:r}}=e,a=H(o),[c]=e.propsOptions;let h=!1;if((n||r>0)&&!(r&16)){if(r&8){const v=e.vnode.dynamicProps;for(let x=0;x<v.length;x++){let C=v[x];if(at(e.emitsOptions,C))continue;const L=s[C];if(c)if(F(l,C))L!==l[C]&&(l[C]=L,h=!0);else{const N=Ae(C);o[N]=It(c,a,N,L,e,!1)}else L!==l[C]&&(l[C]=L,h=!0)}}}else{Do(e,s,o,l)&&(h=!0);let v;for(const x in a)(!s||!F(s,x)&&((v=ms(x))===x||!F(s,v)))&&(c?t&&(t[x]!==void 0||t[v]!==void 0)&&(o[x]=It(c,a,x,void 0,e,!0)):delete o[x]);if(l!==a)for(const x in l)(!s||!F(s,x))&&(delete l[x],h=!0)}h&&Ie(e,"set","$attrs")}function Do(e,s,t,n){const[o,l]=e.propsOptions;let r=!1,a;if(s)for(let c in s){if(Fs(c))continue;const h=s[c];let v;o&&F(o,v=Ae(c))?!l||!l.includes(v)?t[v]=h:(a||(a={}))[v]=h:at(e.emitsOptions,c)||(!(c in n)||h!==n[c])&&(n[c]=h,r=!0)}if(l){const c=H(t),h=a||W;for(let v=0;v<l.length;v++){const x=l[v];t[x]=It(o,c,x,h[x],e,!F(h,x))}}return r}function It(e,s,t,n,o,l){const r=e[t];if(r!=null){const a=F(r,"default");if(a&&n===void 0){const c=r.default;if(r.type!==Function&&j(c)){const{propsDefaults:h}=o;t in h?n=h[t]:(ys(o),n=h[t]=c.call(null,s),ns())}else n=c}r[0]&&(l&&!a?n=!1:r[1]&&(n===""||n===ms(t))&&(n=!0))}return n}function Lo(e,s,t=!1){const n=s.propsCache,o=n.get(e);if(o)return o;const l=e.props,r={},a=[];let c=!1;if(!j(e)){const v=x=>{c=!0;const[C,L]=Lo(x,s,!0);le(r,C),L&&a.push(...L)};!t&&s.mixins.length&&s.mixins.forEach(v),e.extends&&v(e.extends),e.mixins&&e.mixins.forEach(v)}if(!l&&!c)return V(e)&&n.set(e,ps),ps;if(A(l))for(let v=0;v<l.length;v++){const x=Ae(l[v]);Ln(x)&&(r[x]=W)}else if(l)for(const v in l){const x=Ae(v);if(Ln(x)){const C=l[v],L=r[x]=A(C)||j(C)?{type:C}:Object.assign({},C);if(L){const N=Mn(Boolean,L.type),B=Mn(String,L.type);L[0]=N>-1,L[1]=B<0||N<B,(N>-1||F(L,"default"))&&a.push(x)}}}const h=[r,a];return V(e)&&n.set(e,h),h}function Ln(e){return e[0]!=="$"}function jn(e){const s=e&&e.toString().match(/^\s*(function|class) (\w+)/);return s?s[2]:e===null?"null":""}function In(e,s){return jn(e)===jn(s)}function Mn(e,s){return A(s)?s.findIndex(t=>In(t,e)):j(s)&&In(s,e)?0:-1}const jo=e=>e[0]==="_"||e==="$stable",ln=e=>A(e)?e.map(Ee):[Ee(e)],Lr=(e,s,t)=>{if(s._n)return s;const n=tr((...o)=>ln(s(...o)),t);return n._c=!1,n},Io=(e,s,t)=>{const n=e._ctx;for(const o in e){if(jo(o))continue;const l=e[o];if(j(l))s[o]=Lr(o,l,n);else if(l!=null){const r=ln(l);s[o]=()=>r}}},Mo=(e,s)=>{const t=ln(s);e.slots.default=()=>t},jr=(e,s)=>{if(e.vnode.shapeFlag&32){const t=s._;t?(e.slots=H(s),Ws(s,"_",t)):Io(s,e.slots={})}else e.slots={},s&&Mo(e,s);Ws(e.slots,ut,1)},Ir=(e,s,t)=>{const{vnode:n,slots:o}=e;let l=!0,r=W;if(n.shapeFlag&32){const a=s._;a?t&&a===1?l=!1:(le(o,s),!t&&a===1&&delete o._):(l=!s.$stable,Io(s,o)),r=s}else s&&(Mo(e,s),r={default:1});if(l)for(const a in o)!jo(a)&&!(a in r)&&delete o[a]};function Oo(){return{app:null,config:{isNativeTag:ol,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Mr=0;function Or(e,s){return function(n,o=null){j(n)||(n=Object.assign({},n)),o!=null&&!V(o)&&(o=null);const l=Oo(),r=new Set;let a=!1;const c=l.app={_uid:Mr++,_component:n,_props:o,_container:null,_context:l,_instance:null,version:ca,get config(){return l.config},set config(h){},use(h,...v){return r.has(h)||(h&&j(h.install)?(r.add(h),h.install(c,...v)):j(h)&&(r.add(h),h(c,...v))),c},mixin(h){return l.mixins.includes(h)||l.mixins.push(h),c},component(h,v){return v?(l.components[h]=v,c):l.components[h]},directive(h,v){return v?(l.directives[h]=v,c):l.directives[h]},mount(h,v,x){if(!a){const C=f(n,o);return C.appContext=l,v&&s?s(C,h):e(C,h,x),a=!0,c._container=h,h.__vue_app__=c,ft(C.component)||C.component.proxy}},unmount(){a&&(e(null,c._container),delete c._container.__vue_app__)},provide(h,v){return l.provides[h]=v,c}};return c}}function Mt(e,s,t,n,o=!1){if(A(e)){e.forEach((C,L)=>Mt(C,s&&(A(s)?s[L]:s),t,n,o));return}if(Js(n)&&!o)return;const l=n.shapeFlag&4?ft(n.component)||n.component.proxy:n.el,r=o?null:l,{i:a,r:c}=e,h=s&&s.r,v=a.refs===W?a.refs={}:a.refs,x=a.setupState;if(h!=null&&h!==c&&(se(h)?(v[h]=null,F(x,h)&&(x[h]=null)):ie(h)&&(h.value=null)),j(c))Je(c,a,12,[r,v]);else{const C=se(c),L=ie(c);if(C||L){const N=()=>{if(e.f){const B=C?F(x,c)?x[c]:v[c]:c.value;o?A(B)&&Ut(B,l):A(B)?B.includes(l)||B.push(l):C?(v[c]=[l],F(x,c)&&(x[c]=v[c])):(c.value=[l],e.k&&(v[e.k]=c.value))}else C?(v[c]=r,F(x,c)&&(x[c]=r)):L&&(c.value=r,e.k&&(v[e.k]=r))};r?(N.id=-1,ce(N,t)):N()}}}const ce=ir;function Fr(e){return Hr(e)}function Hr(e,s){const t=pl();t.__VUE__=!0;const{insert:n,remove:o,patchProp:l,createElement:r,createText:a,createComment:c,setText:h,setElementText:v,parentNode:x,nextSibling:C,setScopeId:L=qe,insertStaticContent:N}=e,B=(i,p,u,_=null,g=null,q=null,T=!1,$=null,P=!!p.dynamicChildren)=>{if(i===p)return;i&&!Ye(i,p)&&(_=Bs(i),Se(i,g,q,!0),i=null),p.patchFlag===-2&&(P=!1,p.dynamicChildren=null);const{type:b,ref:k,shapeFlag:E}=p;switch(b){case dt:Z(i,p,u,_);break;case je:z(i,p,u,_);break;case zs:i==null&&ye(p,u,_,T);break;case be:xe(i,p,u,_,g,q,T,$,P);break;default:E&1?ne(i,p,u,_,g,q,T,$,P):E&6?Be(i,p,u,_,g,q,T,$,P):(E&64||E&128)&&b.process(i,p,u,_,g,q,T,$,P,rs)}k!=null&&g&&Mt(k,i&&i.ref,q,p||i,!p)},Z=(i,p,u,_)=>{if(i==null)n(p.el=a(p.children),u,_);else{const g=p.el=i.el;p.children!==i.children&&h(g,p.children)}},z=(i,p,u,_)=>{i==null?n(p.el=c(p.children||""),u,_):p.el=i.el},ye=(i,p,u,_)=>{[i.el,i.anchor]=N(i.children,p,u,_,i.el,i.anchor)},I=({el:i,anchor:p},u,_)=>{let g;for(;i&&i!==p;)g=C(i),n(i,u,_),i=g;n(p,u,_)},K=({el:i,anchor:p})=>{let u;for(;i&&i!==p;)u=C(i),o(i),i=u;o(p)},ne=(i,p,u,_,g,q,T,$,P)=>{T=T||p.type==="svg",i==null?ls(p,u,_,g,q,T,$,P):te(i,p,g,q,T,$,P)},ls=(i,p,u,_,g,q,T,$)=>{let P,b;const{type:k,props:E,shapeFlag:R,transition:D,dirs:O}=i;if(P=i.el=r(i.type,q,E&&E.is,E),R&8?v(P,i.children):R&16&&M(i.children,P,null,_,g,q&&k!=="foreignObject",T,$),O&&Ve(i,null,_,"created"),Oe(P,i,i.scopeId,T,_),E){for(const J in E)J!=="value"&&!Fs(J)&&l(P,J,null,E[J],q,i.children,_,g,De);"value"in E&&l(P,"value",null,E.value),(b=E.onVnodeBeforeMount)&&Ce(b,_,i)}O&&Ve(i,null,_,"beforeMount");const X=(!g||g&&!g.pendingBranch)&&D&&!D.persisted;X&&D.beforeEnter(P),n(P,p,u),((b=E&&E.onVnodeMounted)||X||O)&&ce(()=>{b&&Ce(b,_,i),X&&D.enter(P),O&&Ve(i,null,_,"mounted")},g)},Oe=(i,p,u,_,g)=>{if(u&&L(i,u),_)for(let q=0;q<_.length;q++)L(i,_[q]);if(g){let q=g.subTree;if(p===q){const T=g.vnode;Oe(i,T,T.scopeId,T.slotScopeIds,g.parent)}}},M=(i,p,u,_,g,q,T,$,P=0)=>{for(let b=P;b<i.length;b++){const k=i[b]=$?He(i[b]):Ee(i[b]);B(null,k,p,u,_,g,q,T,$)}},te=(i,p,u,_,g,q,T)=>{const $=p.el=i.el;let{patchFlag:P,dynamicChildren:b,dirs:k}=p;P|=i.patchFlag&16;const E=i.props||W,R=p.props||W;let D;u&&Ke(u,!1),(D=R.onVnodeBeforeUpdate)&&Ce(D,u,p,i),k&&Ve(p,i,u,"beforeUpdate"),u&&Ke(u,!0);const O=g&&p.type!=="foreignObject";if(b?G(i.dynamicChildren,b,$,u,_,O,q):T||U(i,p,$,null,u,_,O,q,!1),P>0){if(P&16)ue($,p,E,R,u,_,g);else if(P&2&&E.class!==R.class&&l($,"class",null,R.class,g),P&4&&l($,"style",E.style,R.style,g),P&8){const X=p.dynamicProps;for(let J=0;J<X.length;J++){const ee=X[J],_e=E[ee],as=R[ee];(as!==_e||ee==="value")&&l($,ee,_e,as,g,i.children,u,_,De)}}P&1&&i.children!==p.children&&v($,p.children)}else!T&&b==null&&ue($,p,E,R,u,_,g);((D=R.onVnodeUpdated)||k)&&ce(()=>{D&&Ce(D,u,p,i),k&&Ve(p,i,u,"updated")},_)},G=(i,p,u,_,g,q,T)=>{for(let $=0;$<p.length;$++){const P=i[$],b=p[$],k=P.el&&(P.type===be||!Ye(P,b)||P.shapeFlag&70)?x(P.el):u;B(P,b,k,null,_,g,q,T,!0)}},ue=(i,p,u,_,g,q,T)=>{if(u!==_){if(u!==W)for(const $ in u)!Fs($)&&!($ in _)&&l(i,$,u[$],null,T,p.children,g,q,De);for(const $ in _){if(Fs($))continue;const P=_[$],b=u[$];P!==b&&$!=="value"&&l(i,$,b,P,T,p.children,g,q,De)}"value"in _&&l(i,"value",u.value,_.value)}},xe=(i,p,u,_,g,q,T,$,P)=>{const b=p.el=i?i.el:a(""),k=p.anchor=i?i.anchor:a("");let{patchFlag:E,dynamicChildren:R,slotScopeIds:D}=p;D&&($=$?$.concat(D):D),i==null?(n(b,u,_),n(k,u,_),M(p.children,u,k,g,q,T,$,P)):E>0&&E&64&&R&&i.dynamicChildren?(G(i.dynamicChildren,R,u,g,q,T,$),(p.key!=null||g&&p===g.subTree)&&Fo(i,p,!0)):U(i,p,u,k,g,q,T,$,P)},Be=(i,p,u,_,g,q,T,$,P)=>{p.slotScopeIds=$,i==null?p.shapeFlag&512?g.ctx.activate(p,u,_,T,P):vs(p,u,_,g,q,T,P):hn(i,p,P)},vs=(i,p,u,_,g,q,T)=>{const $=i.component=Yr(i,_,g);if(ct(i)&&($.ctx.renderer=rs),ea($),$.asyncDep){if(g&&g.registerDep($,re),!i.el){const P=$.subTree=f(je);z(null,P,p,u)}return}re($,i,p,u,g,q,T)},hn=(i,p,u)=>{const _=p.component=i.component;if(lr(i,p,u))if(_.asyncDep&&!_.asyncResolved){Q(_,p,u);return}else _.next=p,Gl(_.update),_.update();else p.el=i.el,_.vnode=p},re=(i,p,u,_,g,q,T)=>{const $=()=>{if(i.isMounted){let{next:k,bu:E,u:R,parent:D,vnode:O}=i,X=k,J;Ke(i,!1),k?(k.el=O.el,Q(i,k,T)):k=O,E&&Hs(E),(J=k.props&&k.props.onVnodeBeforeUpdate)&&Ce(J,D,k,O),Ke(i,!0);const ee=vt(i),_e=i.subTree;i.subTree=ee,B(_e,ee,x(_e.el),Bs(_e),i,g,q),k.el=ee.el,X===null&&rr(i,ee.el),R&&ce(R,g),(J=k.props&&k.props.onVnodeUpdated)&&ce(()=>Ce(J,D,k,O),g)}else{let k;const{el:E,props:R}=p,{bm:D,m:O,parent:X}=i,J=Js(p);if(Ke(i,!1),D&&Hs(D),!J&&(k=R&&R.onVnodeBeforeMount)&&Ce(k,X,p),Ke(i,!0),E&&gt){const ee=()=>{i.subTree=vt(i),gt(E,i.subTree,i,g,null)};J?p.type.__asyncLoader().then(()=>!i.isUnmounted&&ee()):ee()}else{const ee=i.subTree=vt(i);B(null,ee,u,_,i,g,q),p.el=ee.el}if(O&&ce(O,g),!J&&(k=R&&R.onVnodeMounted)){const ee=p;ce(()=>Ce(k,X,ee),g)}(p.shapeFlag&256||X&&Js(X.vnode)&&X.vnode.shapeFlag&256)&&i.a&&ce(i.a,g),i.isMounted=!0,p=u=_=null}},P=i.effect=new Vt($,()=>nn(b),i.scope),b=i.update=()=>P.run();b.id=i.uid,Ke(i,!0),b()},Q=(i,p,u)=>{p.component=i;const _=i.vnode.props;i.vnode=p,i.next=null,Dr(i,p.props,_,u),Ir(i,p.children,u),gs(),En(),_s()},U=(i,p,u,_,g,q,T,$,P=!1)=>{const b=i&&i.children,k=i?i.shapeFlag:0,E=p.children,{patchFlag:R,shapeFlag:D}=p;if(R>0){if(R&128){As(b,E,u,_,g,q,T,$,P);return}else if(R&256){Xe(b,E,u,_,g,q,T,$,P);return}}D&8?(k&16&&De(b,g,q),E!==b&&v(u,E)):k&16?D&16?As(b,E,u,_,g,q,T,$,P):De(b,g,q,!0):(k&8&&v(u,""),D&16&&M(E,u,_,g,q,T,$,P))},Xe=(i,p,u,_,g,q,T,$,P)=>{i=i||ps,p=p||ps;const b=i.length,k=p.length,E=Math.min(b,k);let R;for(R=0;R<E;R++){const D=p[R]=P?He(p[R]):Ee(p[R]);B(i[R],D,u,null,g,q,T,$,P)}b>k?De(i,g,q,!0,!1,E):M(p,u,_,g,q,T,$,P,E)},As=(i,p,u,_,g,q,T,$,P)=>{let b=0;const k=p.length;let E=i.length-1,R=k-1;for(;b<=E&&b<=R;){const D=i[b],O=p[b]=P?He(p[b]):Ee(p[b]);if(Ye(D,O))B(D,O,u,null,g,q,T,$,P);else break;b++}for(;b<=E&&b<=R;){const D=i[E],O=p[R]=P?He(p[R]):Ee(p[R]);if(Ye(D,O))B(D,O,u,null,g,q,T,$,P);else break;E--,R--}if(b>E){if(b<=R){const D=R+1,O=D<k?p[D].el:_;for(;b<=R;)B(null,p[b]=P?He(p[b]):Ee(p[b]),u,O,g,q,T,$,P),b++}}else if(b>R)for(;b<=E;)Se(i[b],g,q,!0),b++;else{const D=b,O=b,X=new Map;for(b=O;b<=R;b++){const fe=p[b]=P?He(p[b]):Ee(p[b]);fe.key!=null&&X.set(fe.key,b)}let J,ee=0;const _e=R-O+1;let as=!1,gn=0;const bs=new Array(_e);for(b=0;b<_e;b++)bs[b]=0;for(b=D;b<=E;b++){const fe=i[b];if(ee>=_e){Se(fe,g,q,!0);continue}let Te;if(fe.key!=null)Te=X.get(fe.key);else for(J=O;J<=R;J++)if(bs[J-O]===0&&Ye(fe,p[J])){Te=J;break}Te===void 0?Se(fe,g,q,!0):(bs[Te-O]=b+1,Te>=gn?gn=Te:as=!0,B(fe,p[Te],u,null,g,q,T,$,P),ee++)}const _n=as?Nr(bs):ps;for(J=_n.length-1,b=_e-1;b>=0;b--){const fe=O+b,Te=p[fe],vn=fe+1<k?p[fe+1].el:_;bs[b]===0?B(null,Te,u,vn,g,q,T,$,P):as&&(J<0||b!==_n[J]?We(Te,u,vn,2):J--)}}},We=(i,p,u,_,g=null)=>{const{el:q,type:T,transition:$,children:P,shapeFlag:b}=i;if(b&6){We(i.component.subTree,p,u,_);return}if(b&128){i.suspense.move(p,u,_);return}if(b&64){T.move(i,p,u,rs);return}if(T===be){n(q,p,u);for(let E=0;E<P.length;E++)We(P[E],p,u,_);n(i.anchor,p,u);return}if(T===zs){I(i,p,u);return}if(_!==2&&b&1&&$)if(_===0)$.beforeEnter(q),n(q,p,u),ce(()=>$.enter(q),g);else{const{leave:E,delayLeave:R,afterLeave:D}=$,O=()=>n(q,p,u),X=()=>{E(q,()=>{O(),D&&D()})};R?R(q,O,X):X()}else n(q,p,u)},Se=(i,p,u,_=!1,g=!1)=>{const{type:q,props:T,ref:$,children:P,dynamicChildren:b,shapeFlag:k,patchFlag:E,dirs:R}=i;if($!=null&&Mt($,null,u,i,!0),k&256){p.ctx.deactivate(i);return}const D=k&1&&R,O=!Js(i);let X;if(O&&(X=T&&T.onVnodeBeforeUnmount)&&Ce(X,p,i),k&6)Vo(i.component,u,_);else{if(k&128){i.suspense.unmount(u,_);return}D&&Ve(i,null,p,"beforeUnmount"),k&64?i.type.remove(i,p,u,g,rs,_):b&&(q!==be||E>0&&E&64)?De(b,p,u,!1,!0):(q===be&&E&384||!g&&k&16)&&De(P,p,u),_&&yn(i)}(O&&(X=T&&T.onVnodeUnmounted)||D)&&ce(()=>{X&&Ce(X,p,i),D&&Ve(i,null,p,"unmounted")},u)},yn=i=>{const{type:p,el:u,anchor:_,transition:g}=i;if(p===be){Wo(u,_);return}if(p===zs){K(i);return}const q=()=>{o(u),g&&!g.persisted&&g.afterLeave&&g.afterLeave()};if(i.shapeFlag&1&&g&&!g.persisted){const{leave:T,delayLeave:$}=g,P=()=>T(u,q);$?$(i.el,q,P):P()}else q()},Wo=(i,p)=>{let u;for(;i!==p;)u=C(i),o(i),i=u;o(p)},Vo=(i,p,u)=>{const{bum:_,scope:g,update:q,subTree:T,um:$}=i;_&&Hs(_),g.stop(),q&&(q.active=!1,Se(T,i,p,u)),$&&ce($,p),ce(()=>{i.isUnmounted=!0},p),p&&p.pendingBranch&&!p.isUnmounted&&i.asyncDep&&!i.asyncResolved&&i.suspenseId===p.pendingId&&(p.deps--,p.deps===0&&p.resolve())},De=(i,p,u,_=!1,g=!1,q=0)=>{for(let T=q;T<i.length;T++)Se(i[T],p,u,_,g)},Bs=i=>i.shapeFlag&6?Bs(i.component.subTree):i.shapeFlag&128?i.suspense.next():C(i.anchor||i.el),mn=(i,p,u)=>{i==null?p._vnode&&Se(p._vnode,null,null,!0):B(p._vnode||null,i,p,null,null,null,u),En(),bo(),p._vnode=i},rs={p:B,um:Se,m:We,r:yn,mt:vs,mc:M,pc:U,pbc:G,n:Bs,o:e};let mt,gt;return s&&([mt,gt]=s(rs)),{render:mn,hydrate:mt,createApp:Or(mn,mt)}}function Ke({effect:e,update:s},t){e.allowRecurse=s.allowRecurse=t}function Fo(e,s,t=!1){const n=e.children,o=s.children;if(A(n)&&A(o))for(let l=0;l<n.length;l++){const r=n[l];let a=o[l];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=o[l]=He(o[l]),a.el=r.el),t||Fo(r,a)),a.type===dt&&(a.el=r.el)}}function Nr(e){const s=e.slice(),t=[0];let n,o,l,r,a;const c=e.length;for(n=0;n<c;n++){const h=e[n];if(h!==0){if(o=t[t.length-1],e[o]<h){s[n]=o,t.push(n);continue}for(l=0,r=t.length-1;l<r;)a=l+r>>1,e[t[a]]<h?l=a+1:r=a;h<e[t[l]]&&(l>0&&(s[n]=t[l-1]),t[l]=n)}}for(l=t.length,r=t[l-1];l-- >0;)t[l]=r,r=s[r];return t}const Jr=e=>e.__isTeleport,be=Symbol(void 0),dt=Symbol(void 0),je=Symbol(void 0),zs=Symbol(void 0),Ps=[];let $e=null;function y(e=!1){Ps.push($e=e?null:[])}function zr(){Ps.pop(),$e=Ps[Ps.length-1]||null}let Es=1;function On(e){Es+=e}function Ur(e){return e.dynamicChildren=Es>0?$e||ps:null,zr(),Es>0&&$e&&$e.push(e),e}function m(e,s,t,n,o,l){return Ur(d(e,s,t,n,o,l,!0))}function Xr(e){return e?e.__v_isVNode===!0:!1}function Ye(e,s){return e.type===s.type&&e.key===s.key}const ut="__vInternal",Ho=({key:e})=>e??null,Us=({ref:e,ref_key:s,ref_for:t})=>e!=null?se(e)||ie(e)||j(e)?{i:he,r:e,k:s,f:!!t}:e:null;function d(e,s=null,t=null,n=0,o=null,l=e===be?0:1,r=!1,a=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:s,key:s&&Ho(s),ref:s&&Us(s),scopeId:it,slotScopeIds:null,children:t,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:l,patchFlag:n,dynamicProps:o,dynamicChildren:null,appContext:null,ctx:he};return a?(rn(c,t),l&128&&e.normalize(c)):t&&(c.shapeFlag|=se(t)?8:16),Es>0&&!r&&$e&&(c.patchFlag>0||l&6)&&c.patchFlag!==32&&$e.push(c),c}const f=Wr;function Wr(e,s=null,t=null,n=0,o=null,l=!1){if((!e||e===Pr)&&(e=je),Xr(e)){const a=Ue(e,s,!0);return t&&rn(a,t),Es>0&&!l&&$e&&(a.shapeFlag&6?$e[$e.indexOf(e)]=a:$e.push(a)),a.patchFlag|=-2,a}if(la(e)&&(e=e.__vccOpts),s){s=Vr(s);let{class:a,style:c}=s;a&&!se(a)&&(s.class=cs(a)),V(c)&&(ho(c)&&!A(c)&&(c=le({},c)),s.style=Jt(c))}const r=se(e)?1:ar(e)?128:Jr(e)?64:V(e)?4:j(e)?2:0;return d(e,s,t,n,o,r,l,!0)}function Vr(e){return e?ho(e)||ut in e?le({},e):e:null}function Ue(e,s,t=!1){const{props:n,ref:o,patchFlag:l,children:r}=e,a=s?Kr(n||{},s):n;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:a,key:a&&Ho(a),ref:s&&s.ref?t&&o?A(o)?o.concat(Us(s)):[o,Us(s)]:Us(s):o,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:r,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:s&&e.type!==be?l===-1?16:l|16:l,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ue(e.ssContent),ssFallback:e.ssFallback&&Ue(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function hs(e=" ",s=0){return f(dt,null,e,s)}function S(e,s){const t=f(zs,null,e);return t.staticCount=s,t}function Ee(e){return e==null||typeof e=="boolean"?f(je):A(e)?f(be,null,e.slice()):typeof e=="object"?He(e):f(dt,null,String(e))}function He(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:Ue(e)}function rn(e,s){let t=0;const{shapeFlag:n}=e;if(s==null)s=null;else if(A(s))t=16;else if(typeof s=="object")if(n&65){const o=s.default;o&&(o._c&&(o._d=!1),rn(e,o()),o._c&&(o._d=!0));return}else{t=32;const o=s._;!o&&!(ut in s)?s._ctx=he:o===3&&he&&(he.slots._===1?s._=1:(s._=2,e.patchFlag|=1024))}else j(s)?(s={default:s,_ctx:he},t=32):(s=String(s),n&64?(t=16,s=[hs(s)]):t=8);e.children=s,e.shapeFlag|=t}function Kr(...e){const s={};for(let t=0;t<e.length;t++){const n=e[t];for(const o in n)if(o==="class")s.class!==n.class&&(s.class=cs([s.class,n.class]));else if(o==="style")s.style=Jt([s.style,n.style]);else if(st(o)){const l=s[o],r=n[o];r&&l!==r&&!(A(l)&&l.includes(r))&&(s[o]=l?[].concat(l,r):r)}else o!==""&&(s[o]=n[o])}return s}function Ce(e,s,t,n=null){ge(e,s,7,[t,n])}const Gr=Oo();let Qr=0;function Yr(e,s,t){const n=e.type,o=(s?s.appContext:e.appContext)||Gr,l={uid:Qr++,vnode:e,type:n,parent:s,appContext:o,root:null,next:null,subTree:null,effect:null,update:null,scope:new dl(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:s?s.provides:Object.create(o.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Lo(n,o),emitsOptions:$o(n,o),emit:null,emitted:null,propsDefaults:W,inheritAttrs:n.inheritAttrs,ctx:W,data:W,props:W,attrs:W,slots:W,refs:W,setupState:W,setupContext:null,suspense:t,suspenseId:t?t.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return l.ctx={_:l},l.root=s?s.root:l,l.emit=Zl.bind(null,l),e.ce&&e.ce(l),l}let Y=null;const Zr=()=>Y||he,ys=e=>{Y=e,e.scope.on()},ns=()=>{Y&&Y.scope.off(),Y=null};function No(e){return e.vnode.shapeFlag&4}let ks=!1;function ea(e,s=!1){ks=s;const{props:t,children:n}=e.vnode,o=No(e);Br(e,t,o,s),jr(e,n);const l=o?sa(e,s):void 0;return ks=!1,l}function sa(e,s){const t=e.type;e.accessCache=Object.create(null),e.proxy=yo(new Proxy(e.ctx,Tr));const{setup:n}=t;if(n){const o=e.setupContext=n.length>1?na(e):null;ys(e),gs();const l=Je(n,e,0,[e.props,o]);if(_s(),ns(),Zn(l)){if(l.then(ns,ns),s)return l.then(r=>{Fn(e,r,s)}).catch(r=>{rt(r,e,0)});e.asyncDep=l}else Fn(e,l,s)}else Jo(e,s)}function Fn(e,s,t){j(s)?e.type.__ssrInlineRender?e.ssrRender=s:e.render=s:V(s)&&(e.setupState=mo(s)),Jo(e,t)}let Hn;function Jo(e,s,t){const n=e.type;if(!e.render){if(!s&&Hn&&!n.render){const o=n.template||on(e).template;if(o){const{isCustomElement:l,compilerOptions:r}=e.appContext.config,{delimiters:a,compilerOptions:c}=n,h=le(le({isCustomElement:l,delimiters:a},r),c);n.render=Hn(o,h)}}e.render=n.render||qe}ys(e),gs(),Cr(e),_s(),ns()}function ta(e){return new Proxy(e.attrs,{get(s,t){return de(e,"get","$attrs"),s[t]}})}function na(e){const s=n=>{e.exposed=n||{}};let t;return{get attrs(){return t||(t=ta(e))},slots:e.slots,emit:e.emit,expose:s}}function ft(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(mo(yo(e.exposed)),{get(s,t){if(t in s)return s[t];if(t in qs)return qs[t](e)},has(s,t){return t in s||t in qs}}))}function oa(e,s=!0){return j(e)?e.displayName||e.name:e.name||s&&e.__name}function la(e){return j(e)&&"__vccOpts"in e}const ra=(e,s)=>Xl(e,s,ks),aa=Symbol(""),ia=()=>Ns(aa),ca="3.2.47",pa="http://www.w3.org/2000/svg",Ze=typeof document<"u"?document:null,Nn=Ze&&Ze.createElement("template"),da={insert:(e,s,t)=>{s.insertBefore(e,t||null)},remove:e=>{const s=e.parentNode;s&&s.removeChild(e)},createElement:(e,s,t,n)=>{const o=s?Ze.createElementNS(pa,e):Ze.createElement(e,t?{is:t}:void 0);return e==="select"&&n&&n.multiple!=null&&o.setAttribute("multiple",n.multiple),o},createText:e=>Ze.createTextNode(e),createComment:e=>Ze.createComment(e),setText:(e,s)=>{e.nodeValue=s},setElementText:(e,s)=>{e.textContent=s},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Ze.querySelector(e),setScopeId(e,s){e.setAttribute(s,"")},insertStaticContent(e,s,t,n,o,l){const r=t?t.previousSibling:s.lastChild;if(o&&(o===l||o.nextSibling))for(;s.insertBefore(o.cloneNode(!0),t),!(o===l||!(o=o.nextSibling)););else{Nn.innerHTML=n?`<svg>${e}</svg>`:e;const a=Nn.content;if(n){const c=a.firstChild;for(;c.firstChild;)a.appendChild(c.firstChild);a.removeChild(c)}s.insertBefore(a,t)}return[r?r.nextSibling:s.firstChild,t?t.previousSibling:s.lastChild]}};function ua(e,s,t){const n=e._vtc;n&&(s=(s?[s,...n]:[...n]).join(" ")),s==null?e.removeAttribute("class"):t?e.setAttribute("class",s):e.className=s}function fa(e,s,t){const n=e.style,o=se(t);if(t&&!o){if(s&&!se(s))for(const l in s)t[l]==null&&Ot(n,l,"");for(const l in t)Ot(n,l,t[l])}else{const l=n.display;o?s!==t&&(n.cssText=t):s&&e.removeAttribute("style"),"_vod"in e&&(n.display=l)}}const Jn=/\s*!important$/;function Ot(e,s,t){if(A(t))t.forEach(n=>Ot(e,s,n));else if(t==null&&(t=""),s.startsWith("--"))e.setProperty(s,t);else{const n=ha(e,s);Jn.test(t)?e.setProperty(ms(n),t.replace(Jn,""),"important"):e[n]=t}}const zn=["Webkit","Moz","ms"],qt={};function ha(e,s){const t=qt[s];if(t)return t;let n=Ae(s);if(n!=="filter"&&n in e)return qt[s]=n;n=ot(n);for(let o=0;o<zn.length;o++){const l=zn[o]+n;if(l in e)return qt[s]=l}return s}const Un="http://www.w3.org/1999/xlink";function ya(e,s,t,n,o){if(n&&s.startsWith("xlink:"))t==null?e.removeAttributeNS(Un,s.slice(6,s.length)):e.setAttributeNS(Un,s,t);else{const l=el(s);t==null||l&&!Qn(t)?e.removeAttribute(s):e.setAttribute(s,l?"":t)}}function ma(e,s,t,n,o,l,r){if(s==="innerHTML"||s==="textContent"){n&&r(n,o,l),e[s]=t??"";return}if(s==="value"&&e.tagName!=="PROGRESS"&&!e.tagName.includes("-")){e._value=t;const c=t??"";(e.value!==c||e.tagName==="OPTION")&&(e.value=c),t==null&&e.removeAttribute(s);return}let a=!1;if(t===""||t==null){const c=typeof e[s];c==="boolean"?t=Qn(t):t==null&&c==="string"?(t="",a=!0):c==="number"&&(t=0,a=!0)}try{e[s]=t}catch{}a&&e.removeAttribute(s)}function es(e,s,t,n){e.addEventListener(s,t,n)}function ga(e,s,t,n){e.removeEventListener(s,t,n)}function _a(e,s,t,n,o=null){const l=e._vei||(e._vei={}),r=l[s];if(n&&r)r.value=n;else{const[a,c]=va(s);if(n){const h=l[s]=$a(n,o);es(e,a,h,c)}else r&&(ga(e,a,r,c),l[s]=void 0)}}const Xn=/(?:Once|Passive|Capture)$/;function va(e){let s;if(Xn.test(e)){s={};let n;for(;n=e.match(Xn);)e=e.slice(0,e.length-n[0].length),s[n[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):ms(e.slice(2)),s]}let Pt=0;const ba=Promise.resolve(),wa=()=>Pt||(ba.then(()=>Pt=0),Pt=Date.now());function $a(e,s){const t=n=>{if(!n._vts)n._vts=Date.now();else if(n._vts<=t.attached)return;ge(qa(n,t.value),s,5,[n])};return t.value=e,t.attached=wa(),t}function qa(e,s){if(A(s)){const t=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{t.call(e),e._stopped=!0},s.map(n=>o=>!o._stopped&&n&&n(o))}else return s}const Wn=/^on[a-z]/,Pa=(e,s,t,n,o=!1,l,r,a,c)=>{s==="class"?ua(e,n,o):s==="style"?fa(e,t,n):st(s)?zt(s)||_a(e,s,t,n,r):(s[0]==="."?(s=s.slice(1),!0):s[0]==="^"?(s=s.slice(1),!1):xa(e,s,n,o))?ma(e,s,n,l,r,a,c):(s==="true-value"?e._trueValue=n:s==="false-value"&&(e._falseValue=n),ya(e,s,n,o))};function xa(e,s,t,n){return n?!!(s==="innerHTML"||s==="textContent"||s in e&&Wn.test(s)&&j(t)):s==="spellcheck"||s==="draggable"||s==="translate"||s==="form"||s==="list"&&e.tagName==="INPUT"||s==="type"&&e.tagName==="TEXTAREA"||Wn.test(s)&&se(t)?!1:s in e}const Sa={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};fr.props;const Qs=e=>{const s=e.props["onUpdate:modelValue"]||!1;return A(s)?t=>Hs(s,t):s};function Ta(e){e.target.composing=!0}function Vn(e){const s=e.target;s.composing&&(s.composing=!1,s.dispatchEvent(new Event("input")))}const is={created(e,{modifiers:{lazy:s,trim:t,number:n}},o){e._assign=Qs(o);const l=n||o.props&&o.props.type==="number";es(e,s?"change":"input",r=>{if(r.target.composing)return;let a=e.value;t&&(a=a.trim()),l&&(a=Vs(a)),e._assign(a)}),t&&es(e,"change",()=>{e.value=e.value.trim()}),s||(es(e,"compositionstart",Ta),es(e,"compositionend",Vn),es(e,"change",Vn))},mounted(e,{value:s}){e.value=s??""},beforeUpdate(e,{value:s,modifiers:{lazy:t,trim:n,number:o}},l){if(e._assign=Qs(l),e.composing||document.activeElement===e&&e.type!=="range"&&(t||n&&e.value.trim()===s||(o||e.type==="number")&&Vs(e.value)===s))return;const r=s??"";e.value!==r&&(e.value=r)}},Ca={deep:!0,created(e,{value:s,modifiers:{number:t}},n){const o=tt(s);es(e,"change",()=>{const l=Array.prototype.filter.call(e.options,r=>r.selected).map(r=>t?Vs(Ys(r)):Ys(r));e._assign(e.multiple?o?new Set(l):l:l[0])}),e._assign=Qs(n)},mounted(e,{value:s}){Kn(e,s)},beforeUpdate(e,s,t){e._assign=Qs(t)},updated(e,{value:s}){Kn(e,s)}};function Kn(e,s){const t=e.multiple;if(!(t&&!A(s)&&!tt(s))){for(let n=0,o=e.options.length;n<o;n++){const l=e.options[n],r=Ys(l);if(t)A(s)?l.selected=tl(s,r)>-1:l.selected=s.has(r);else if(et(Ys(l),s)){e.selectedIndex!==n&&(e.selectedIndex=n);return}}!t&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function Ys(e){return"_value"in e?e._value:e.value}const xt={beforeMount(e,{value:s},{transition:t}){e._vod=e.style.display==="none"?"":e.style.display,t&&s?t.beforeEnter(e):ws(e,s)},mounted(e,{value:s},{transition:t}){t&&s&&t.enter(e)},updated(e,{value:s,oldValue:t},{transition:n}){!s!=!t&&(n?s?(n.beforeEnter(e),ws(e,!0),n.enter(e)):n.leave(e,()=>{ws(e,!1)}):ws(e,s))},beforeUnmount(e,{value:s}){ws(e,s)}};function ws(e,s){e.style.display=s?e._vod:"none"}const Ea=le({patchProp:Pa},da);let Gn;function ka(){return Gn||(Gn=Fr(Ea))}const Ra=(...e)=>{const s=ka().createApp(...e),{mount:t}=s;return s.mount=n=>{const o=Aa(n);if(!o)return;const l=s._component;!j(l)&&!l.render&&!l.template&&(l.template=o.innerHTML),o.innerHTML="";const r=t(o,!1,o instanceof SVGElement);return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),r},s};function Aa(e){return se(e)?document.querySelector(e):e}const Ba="/rest/assets/jersey-3810312f.svg",w=(e,s)=>{const t=e.__vccOpts||e;for(const[n,o]of s)t[n]=o;return t},Da={},La={class:"slide show"},ja=S('<div class="heading">API et Webservices</div><div class="content grid center"><h3 class="title">API et Webservices<br></h3><p class="sub-title">RESTful et SOAP</p><p>Mon portefeuille</p><p><a href="https://kilian-schropp.surge.sh/">https://kilian-schropp.surge.sh/</a></p></div>',2),Ia=[ja];function Ma(e,s){return y(),m("div",La,Ia)}const Oa=w(Da,[["render",Ma]]),Fa="/rest/assets/Wikipedia_logo_(svg)-1132e921.svg",Ha="/rest/assets/server-side-rendering-8b828042.svg",Na={},Ja={class:"slide"},za=S('<div class="heading">Server-side-rendering vs client-side-rendering</div><div class="content"><div class="flex-container"><div style="width:50%;"><p>Pour commencer, examinons un site web avec rendu côté serveur.</p><br><p> C&#39;est assez simple. Le client demande un site, le serveur lui donne un fichier HTML complet. </p><h3>L&#39;exemple classique est Wikipédia.</h3><br><img src="'+Fa+'" style="width:40%;"></div><div style="width:45%;"><img src="'+Ha+'" style="width:100%;"></div></div></div>',2),Ua=[za];function Xa(e,s){return y(),m("div",Ja,Ua)}const Wa=w(Na,[["render",Xa]]),Va="/rest/assets/gmail-logo-8385bfb8.svg",Ka="/rest/assets/client-side-rendering-2a1a6bbf.svg",Ga={},Qa={class:"slide"},Ya=S('<div class="heading">Server-side-rendering vs client-side-rendering</div><div class="content"><div class="flex-container"><div style="width:25%;"><p> Maintenant, faisons la même chose mais avec un rendu côté client </p><br><p>Nous voyons déjà qu&#39;il se passe beaucoup plus de choses</p><h3>L&#39;exemple classique est GMail.</h3><img src="'+Va+'" style="width:65%;"></div><div style="width:70%;"><img src="'+Ka+'" style="width:100%;"></div></div></div>',2),Za=[Ya];function ei(e,s){return y(),m("div",Qa,Za)}const si=w(Ga,[["render",ei]]),ti="/rest/assets/http-f64adf40.svg",ni={},oi={class:"slide"},li=d("div",{class:"heading"},"HTTP Protocol detour",-1),ri=d("div",{class:"content"},[d("p",null," Les serveurs Web parlent le protocole HTTP, c'est pourquoi ils sont souvent appelés serveurs HTTP. Ces serveurs HTTP stockent les données de l'Internet et fournissent les données lorsqu'elles sont demandées par les clients HTTP. "),d("br"),d("img",{src:ti,style:{width:"60%"}})],-1),ai=[li,ri];function ii(e,s){return y(),m("div",oi,ai)}const ci=w(ni,[["render",ii]]),pi="/rest/assets/httpMIME-b7d0018a.svg",di={},ui={class:"slide"},fi=S('<div class="heading">HTTP Protocol detour</div><div class="content"><p> Comme Internet héberge plusieurs milliers de types de données différents, HTTP marque soigneusement chaque objet transporté sur le Web avec une étiquette de format de données appelée type MIME. </p><div class="flex-container"><div style="width:45%;"><p> • Un document texte au format HTML serait étiqueté avec le type text/html </p><p> • Un document de texte ASCII simple serait étiqueté avec le type text/plain </p><p>• Une version JPEG d&#39;une image serait image/jpeg</p><p>• Une image au format GIF serait image/gif</p><p>• Un film Apple QuickTime serait video/quicktime.</p><p> • Une présentation Microsoft PowerPoint serait application/vnd.mspowerpoint </p></div><div style="width:50%;"><br><img src="'+pi+'" style="width:100%;"></div></div></div>',2),hi=[fi];function yi(e,s){return y(),m("div",ui,hi)}const mi=w(di,[["render",yi]]),gi="/rest/assets/URL-d330440e.svg",_i={},vi={class:"slide"},bi=d("div",{class:"heading"},"HTTP Protocol detour",-1),wi=d("div",{class:"content"},[d("p",null," Les URL décrivent l'emplacement spécifique d'une ressource sur un serveur particulier. Elles vous indiquent exactement comment aller chercher une ressource à partir d'un emplacement précis et fixe. "),d("br"),d("img",{src:gi,style:{width:"95%"}})],-1),$i=[bi,wi];function qi(e,s){return y(),m("div",vi,$i)}const Pi=w(_i,[["render",qi]]),xi={},Si={class:"slide"},Ti=S('<div class="heading">HTTP Protocol detour</div><div class="content"><p> Le protocole HTTP prend en charge plusieurs commandes de requête différentes, appelées méthodes HTTP. Chaque requête HTTP possède une méthode. La méthode indique au serveur l&#39;action à effectuer </p><br><table><tbody><tr><th>HTTP method</th><th>Description</th></tr><tr><td>GET</td><td>Envoyer une ressource nommée du serveur au client</td></tr><tr><td>POST</td><td> Envoyer les données du client dans une application passerelle serveur </td></tr><tr><td>PUT</td><td> Stocker les données du client dans une ressource serveur nommée </td></tr><tr><td>DELETE</td><td>Supprime la ressource nommée d&#39;un serveur.</td></tr><tr><td>HEAD</td><td> Envoyer uniquement les en-têtes HTTP de la réponse pour la ressource nommée. </td></tr></tbody></table><br><p> Il existe d&#39;autres méthodes HTTP, mais celles-ci sont les plus importantes </p></div>',2),Ci=[Ti];function Ei(e,s){return y(),m("div",Si,Ci)}const ki=w(xi,[["render",Ei]]),Ri={},Ai={class:"slide"},Bi=S(`<div class="heading">HTTP Protocol detour</div><div class="content"><p> Ici, nous n&#39;envoyons pas de données de requête au serveur car nous récupérons une page HTML simple du serveur. </p><br><div class="codeblock"><pre style="margin:0;line-height:125%;">          GET <span style="color:#333333;">/</span>hello<span style="color:#333333;">.</span>htm HTTP<span style="color:#333333;">/</span><span style="color:#6600EE;font-weight:bold;">1.1</span>
          User<span style="color:#333333;">-</span>Agent: Mozilla<span style="color:#333333;">/</span><span style="color:#6600EE;font-weight:bold;">4.0</span> (compatible; MSIE5<span style="color:#333333;">.</span><span style="color:#4400EE;font-weight:bold;">01</span>; Windows NT)
          Host: www<span style="color:#333333;">.</span>tutorialspoint<span style="color:#333333;">.</span>com
          Accept<span style="color:#333333;">-</span>Language: en<span style="color:#333333;">-</span>us
          Accept<span style="color:#333333;">-</span>Encoding: gzip, deflate
          Connection: Keep<span style="color:#333333;">-</span>Alive</pre></div></div>`,2),Di=[Bi];function Li(e,s){return y(),m("div",Ai,Di)}const ji=w(Ri,[["render",Li]]),Ii={},Mi={class:"slide"},Oi=S('<div class="heading">HTTP Protocol detour</div><div class="content"><p> Chaque message de réponse HTTP est accompagné d&#39;un code d&#39;état. Ce code d&#39;état est un code numérique à trois chiffres qui indique au client si la demande a abouti ou si d&#39;autres actions sont nécessaires. </p><br><p>Liste abrégée des codes d&#39;état courants</p><table><tbody><tr><th>HTTP status code</th><th>Description</th></tr><tr><td>200</td><td>OK. Le document est retourné correctement.</td></tr><tr><td>404</td><td>Non trouvé. Impossible de trouver cette ressource.</td></tr><tr><td>302</td><td>Rediriger. Allez ailleurs pour obtenir la ressource.</td></tr><tr><td>500</td><td>Internal Server Error</td></tr></tbody></table></div>',2),Fi=[Oi];function Hi(e,s){return y(),m("div",Mi,Fi)}const Ni=w(Ii,[["render",Hi]]),Ji={},zi={class:"slide"},Ui=S(`<div class="heading">HTTP Protocol detour</div><div class="content"><p> Réponse HTTP à une demande de récupération de la page hello.html sur le serveur web. </p><br><div class="codeblock"><pre style="margin:0;line-height:125%;">          HTTP<span style="color:#333333;">/</span><span style="color:#6600EE;font-weight:bold;">1.1</span> <span style="color:#0000DD;font-weight:bold;">200</span> OK
          Date: Mon, <span style="color:#0000DD;font-weight:bold;">27</span> Jul <span style="color:#0000DD;font-weight:bold;">2009</span> <span style="color:#0000DD;font-weight:bold;">12</span>:<span style="color:#0000DD;font-weight:bold;">28</span>:<span style="color:#0000DD;font-weight:bold;">53</span> GMT
          Server: Apache<span style="color:#333333;">/</span><span style="color:#6600EE;font-weight:bold;">2.2</span><span style="color:#333333;">.</span><span style="color:#0000DD;font-weight:bold;">14</span> (Win32)
          Last<span style="color:#333333;">-</span>Modified: Wed, <span style="color:#0000DD;font-weight:bold;">22</span> Jul <span style="color:#0000DD;font-weight:bold;">2009</span> <span style="color:#0000DD;font-weight:bold;">19</span>:<span style="color:#0000DD;font-weight:bold;">15</span>:<span style="color:#0000DD;font-weight:bold;">56</span> GMT
          Content<span style="color:#333333;">-</span>Length: <span style="color:#0000DD;font-weight:bold;">88</span>
          Content<span style="color:#333333;">-</span>Type: text<span style="color:#333333;">/</span>html
          Connection: Closed

          <span style="color:#333333;">&lt;</span>html<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;</span>body<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;</span>h1<span style="color:#333333;">&gt;</span>Hello, World<span style="color:#FF0000;background-color:#FFAAAA;">!</span><span style="color:#333333;">&lt;/</span>h1<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;/</span>body<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;/</span>html<span style="color:#333333;">&gt;</span></pre></div></div>`,2),Xi=[Ui];function Wi(e,s){return y(),m("div",zi,Xi)}const Vi=w(Ji,[["render",Wi]]),Ki={},Gi={class:"slide"},Qi=S(`<div class="heading">HTTP Protocol detour</div><div class="content"><p> L&#39;exemple suivant montre un message de réponse HTTP affichant une condition d&#39;erreur lorsque le serveur web n&#39;a pas pu trouver la page demandée </p><div class="codeblock"><pre style="margin:0;line-height:125%;">          HTTP<span style="color:#333333;">/</span><span style="color:#6600EE;font-weight:bold;">1.1</span> <span style="color:#0000DD;font-weight:bold;">404</span> Not Found
          Date: Sun, <span style="color:#0000DD;font-weight:bold;">18</span> Oct <span style="color:#0000DD;font-weight:bold;">2012</span> <span style="color:#0000DD;font-weight:bold;">10</span>:<span style="color:#0000DD;font-weight:bold;">36</span>:<span style="color:#0000DD;font-weight:bold;">20</span> GMT
          Server: Apache<span style="color:#333333;">/</span><span style="color:#6600EE;font-weight:bold;">2.2</span><span style="color:#333333;">.</span><span style="color:#0000DD;font-weight:bold;">14</span> (Win32)
          Content<span style="color:#333333;">-</span>Length: <span style="color:#0000DD;font-weight:bold;">230</span>
          Connection: Closed
          Content<span style="color:#333333;">-</span>Type: text<span style="color:#333333;">/</span>html; charset<span style="color:#333333;">=</span>iso<span style="color:#333333;">-</span><span style="color:#0000DD;font-weight:bold;">8859</span><span style="color:#333333;">-</span><span style="color:#0000DD;font-weight:bold;">1</span>
          <span style="color:#333333;">&lt;</span><span style="color:#FF0000;background-color:#FFAAAA;">!</span>DOCTYPE HTML PUBLIC <span style="background-color:#fff0f0;">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span><span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;</span>html<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;</span>head<span style="color:#333333;">&gt;</span>
            <span style="color:#333333;">&lt;</span>title<span style="color:#333333;">&gt;</span><span style="color:#0000DD;font-weight:bold;">404</span> Not Found<span style="color:#333333;">&lt;/</span>title<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;/</span>head<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;</span>body<span style="color:#333333;">&gt;</span>
            <span style="color:#333333;">&lt;</span>p<span style="color:#333333;">&gt;</span>The requested URL <span style="color:#333333;">/</span>t<span style="color:#333333;">.</span>html was <span style="color:#000000;font-weight:bold;">not</span> found on this server<span style="color:#333333;">.&lt;/</span>p<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;/</span>body<span style="color:#333333;">&gt;</span>
          <span style="color:#333333;">&lt;/</span>html<span style="color:#333333;">&gt;</span></pre></div></div>`,2),Yi=[Qi];function Zi(e,s){return y(),m("div",Gi,Yi)}const ec=w(Ki,[["render",Zi]]),sc={data(){return{params:[{key:"",value:""}]}},methods:{addParam(){this.params.push({key:"",value:""})},removeParam(e){this.params.splice(e,1)},communicateParams(){this.$emit("communicateParams",this.params)}}},tc=d("thead",null,[d("tr",null,[d("th",null,"Key"),d("th",null,"Value"),d("th")])],-1),nc=["onUpdate:modelValue"],oc=["onUpdate:modelValue"],lc=["onClick"];function rc(e,s,t,n,o,l){return y(),m("div",null,[d("table",null,[tc,d("tbody",null,[(y(!0),m(be,null,Sr(o.params,(r,a)=>(y(),m("tr",{key:a},[d("td",null,[Re(d("input",{type:"text","onUpdate:modelValue":c=>r.key=c,placeholder:"Enter key"},null,8,nc),[[is,r.key]])]),d("td",null,[Re(d("input",{type:"text","onUpdate:modelValue":c=>r.value=c,placeholder:"Enter value",onBlur:s[0]||(s[0]=(...c)=>l.communicateParams&&l.communicateParams(...c))},null,40,oc),[[is,r.value]])]),d("td",null,[d("button",{onClick:c=>l.removeParam(a)},"Remove",8,lc)])]))),128))])]),d("button",{onClick:s[1]||(s[1]=(...r)=>l.addParam&&l.addParam(...r))},"Add parameter")])}const ac=w(sc,[["render",rc]]);const ic={data(){return{activetab:"1",params:[{key:"",value:""}],auth:[{key:"",value:""}],header:[{key:"",value:""}]}},watch:{params(e,s){this.sendData()},auth(e,s){this.sendData()},header(e,s){this.sendData()}},components:{KeyValueTable:ac},methods:{communicateParams(e,s){this[s]=e},sendData(){const e={params:this.params,auth:this.auth,header:this.header};this.$emit("data-updated",e)}}},cc={id:"tabs",class:"tabcontainer",style:{height:"70%","overflow-y":"scroll"}},pc={class:"tabs"},dc={class:"contentcontainer"},uc={class:"tabcontent"},fc={class:"tabcontent"},hc={class:"tabcontent"};function yc(e,s,t,n,o,l){const r=Ao("KeyValueTable");return y(),m("div",cc,[d("div",pc,[d("a",{onClick:s[0]||(s[0]=a=>o.activetab="1"),class:cs([o.activetab==="1"?"active":""])},"Params",2),d("a",{onClick:s[1]||(s[1]=a=>o.activetab="2"),class:cs([o.activetab==="2"?"active":""])},"Authorization",2),d("a",{onClick:s[2]||(s[2]=a=>o.activetab="3"),class:cs([o.activetab==="3"?"active":""])},"Headers ",2)]),d("div",dc,[Re(d("div",uc,[f(r,{onCommunicateParams:s[3]||(s[3]=a=>l.communicateParams(a,"params"))})],512),[[xt,o.activetab==="1"]]),Re(d("div",fc,[f(r,{onCommunicateParams:s[4]||(s[4]=a=>l.communicateParams(a,"auth"))})],512),[[xt,o.activetab==="2"]]),Re(d("div",hc,[f(r,{onCommunicateParams:s[5]||(s[5]=a=>l.communicateParams(a,"header"))})],512),[[xt,o.activetab==="3"]])])])}const mc=w(ic,[["render",yc],["__scopeId","data-v-ed8fb3b5"]]);const gc={name:"RestClient",components:{TabsWrapper:mc},data:function(){return{selectedMethod:"GET",url:this.link,tabs:{auth:[],header:[],params:[]},response:"",httpcode:"",headers:"",message:"Bienvenue ! Utilisez cette page simple pour explorer l'API. Spécifiez la méthode HTTP, l'URL et les paramètres, puis cliquez sur 'Envoyer'. Cette page nécessite un navigateur supportant le HTML5."}},props:["link"],methods:{onMethodChange(e){this.selectedMethod=e.target.value},handleDataUpdate(e){this.tabs=e,console.log("Received data from child component: ",e)},buildHeader(e){for(const s of this.tabs.header)s.key&&s.value&&(e.headers[s.key]=s.value);return e},buildPutBody(e){const s=new URLSearchParams;for(const t of this.tabs.params)s.append(t.key,t.value);return e.body=s.toString(),e.headers["Content-Type"]="application/x-www-form-urlencoded",e},prettifyXml(e,s){var t="",n="";return s=s||"	",e.split(/>\s*</).forEach(function(o){o.match(/^\/\w/)&&(n=n.substring(s.length)),t+=n+"<"+o+`>\r
`,o.match(/^<?\w[^>]*[^/]$/)&&(n+=s)}),t.substring(1,t.length-3)},buildPostBody(e){const s=new URLSearchParams;for(const t of this.tabs.params)s.append(t.key,t.value);return e.body=s.toString(),e.headers["Content-Type"]="application/x-www-form-urlencoded",e},async makeHttpRequest(){let e={method:this.selectedMethod,headers:{}};e=this.buildHeader(e),this.selectedMethod==="PUT"&&(e=this.buildPutBody(e)),this.selectedMethod==="POST"&&(e=this.buildPostBody(e)),this.tabs.authorization!=null&&this.tabs.authorization.length>0&&(e.headers.Authorization=`Bearer ${this.tabs.authorization}`);try{const s=await fetch(this.url,e);this.httpcode=s.status,this.headers="";for(let n of s.headers.entries())this.headers+=n+`
`;const t=s.headers.get("content-type");if(t==="application/json"){let n=await s.json();Array.isArray(n)&&(n=n.filter((o,l)=>l<500)),this.response=JSON.stringify(n,null,2)}else if(t==="application/xml"){let n=await s.text();this.response=this.prettifyXml(n)}else{let n=await s.text();this.response=n}}catch(s){this.message=s}}}},an=e=>(er("data-v-9b97db61"),e=e(),sr(),e),_c={class:"restcontainer"},vc={class:"request subcontainer"},bc=an(()=>d("h3",null,"Options de requête HTTP",-1)),wc=an(()=>d("hr",null,null,-1)),$c=S('<option value="GET" data-v-9b97db61>GET</option><option value="POST" data-v-9b97db61>POST</option><option value="OPTIONS" data-v-9b97db61>OPTIONS</option><option value="PUT" data-v-9b97db61>PUT</option><option value="DELETE" data-v-9b97db61>DELETE</option><option value="HEAD" data-v-9b97db61>HEAD</option>',6),qc=[$c],Pc={class:"httpcode subcontainer"},xc={class:"response subcontainer"},Sc={class:"header subcontainer"},Tc={class:"button subcontainer"},Cc=an(()=>d("span",null,"Envoyer ",-1)),Ec=[Cc],kc={class:"message subcontainer"};function Rc(e,s,t,n,o,l){const r=Ao("TabsWrapper");return y(),m("div",_c,[d("div",vc,[bc,wc,Re(d("select",{"onUpdate:modelValue":s[0]||(s[0]=a=>e.selectedMethod=a),onChange:s[1]||(s[1]=(...a)=>l.onMethodChange&&l.onMethodChange(...a))},qc,544),[[Ca,e.selectedMethod]]),Re(d("input",{type:"text",class:"input-xlarge",id:"urlvalue","onUpdate:modelValue":s[2]||(s[2]=a=>e.url=a)},null,512),[[is,e.url]]),f(r,{onDataUpdated:l.handleDataUpdate},null,8,["onDataUpdated"])]),d("div",Pc,[d("label",null,"Http Code: "+nl(this.httpcode),1)]),d("div",xc,[Re(d("textarea",{readonly:"","onUpdate:modelValue":s[3]||(s[3]=a=>this.response=a)},null,512),[[is,this.response]])]),d("div",Sc,[Re(d("textarea",{readonly:"","onUpdate:modelValue":s[4]||(s[4]=a=>e.headers=a)},null,512),[[is,e.headers]])]),d("div",Tc,[d("button",{style:{"vertical-align":"middle"},onClick:s[5]||(s[5]=(...a)=>l.makeHttpRequest&&l.makeHttpRequest(...a))},Ec)]),d("div",kc,[Re(d("textarea",{readonly:"","onUpdate:modelValue":s[6]||(s[6]=a=>e.message=a)},null,512),[[is,e.message]])])])}const Pe=w(gc,[["render",Rc],["__scopeId","data-v-9b97db61"]]),Ac={class:"slide"},Bc=d("div",{class:"heading"},"HTTP Protocol detour",-1),Dc={class:"content"},Lc=d("p",null,"Voyons comment une requête GET pour une page HTML peut ressembler",-1),jc={__name:"SlidePresentation12",setup(e){return(s,t)=>(y(),m("div",Ac,[Bc,d("div",Dc,[Lc,f(Pe,{link:"https://legacy.reactjs.org/docs/hello-world.html"})])]))}},Ic="/rest/assets/stop-35a0c514.svg",Mc={},Oc={class:"slide"},Fc=d("div",{class:"heading"},"HTTP Protocol detour",-1),Hc=d("div",{class:"content"},[d("p",null," Nous n'avons fait qu'effleurer la surface du protocole http. Nous pourrions passer une semaine entière à plonger dans les détails de la pile de protocoles. "),d("img",{src:Ic,style:{width:"40%"}})],-1),Nc=[Fc,Hc];function Jc(e,s){return y(),m("div",Oc,Nc)}const zc=w(Mc,[["render",Jc]]),Uc="/rest/assets/gmail-84f2f7ca.svg",Xc={},Wc={class:"slide"},Vc=S('<div class="heading">Client-side-rendering</div><div class="content"><div class="flex-container"><div style="width:45%;"><h2> D&#39;accord, le rendu côté client est plus complexe, alors pourquoi le faire ? </h2><br><p> Les sites web peuvent ressembler à des logiciels et ne sont pas limités par l&#39;interaction avec l&#39;utilisateur. </p><p> Dans cet exemple, le site Gmail demande toutes les 30 secondes si vous avez reçu un nouvel e-mail. </p></div><div style="width:50%;"><img src="'+Uc+'" style="width:100%;"></div></div></div>',2),Kc=[Vc];function Gc(e,s){return y(),m("div",Wc,Kc)}const Qc=w(Xc,[["render",Gc]]),Yc="/rest/assets/client-side-web-service-339cdc9b.svg",Zc={},ep={class:"slide"},sp=d("div",{class:"heading"},"Client-side-rendering",-1),tp=d("div",{class:"content"},[d("p",null," Le rendu côté client et les services Web vont de pair. Sans service Web, le rendu côté client sera difficile. "),d("img",{src:Yc,style:{width:"47%"}})],-1),np=[sp,tp];function op(e,s){return y(),m("div",ep,np)}const lp=w(Zc,[["render",op]]),rp="/rest/assets/languageView-9d1d53fd.png",ap="/rest/assets/client-and-appclient-fd0fc83b.svg",ip={},cp={class:"slide"},pp=S('<div class="heading">Client-side-rendering</div><div class="content"><div class="flex-container"><div style="width:55%;"><p> Ce qui ne veut pas dire que seul le Presentation Tier (niveau) est client d&#39;un service web. Les serveurs peuvent également communiquer entre eux de cette manière. </p><p><b>Web scraper: </b>Quand je suis arrivé en France, j&#39;ai écrit un Web scraper utilisant l&#39;API pole emploi pour déterminer les besoins du marché de l&#39;emploi en Occitanie. </p><img src="'+rp+'" style="width:65%;"></div><div style="width:42%;"><img src="'+ap+'" style="width:100%;"></div></div></div>',2),dp=[pp];function up(e,s){return y(),m("div",cp,dp)}const fp=w(ip,[["render",up]]),hp="/rest/assets/Hammock-74c4fe53.svg",yp={},mp={class:"slide"},gp=S('<div class="heading">RESTful</div><div class="content"><div class="flex-container"><div style="width:50%;"><h3>Ressources adressables:</h3><p>chaque ressource doit être accessible via un URI</p><h3>Une interface uniforme et contraignante:</h3><p> Utilisez un petit ensemble de méthodes bien définies pour manipuler vos ressources. </p><h3>Orienté vers la représentation:</h3><p> Différentes plateformes ont besoin de différents formats.JavaScript = JSON, Java = XML </p><h3>Communiquer sans état:</h3><p>Les applications sans état sont plus faciles à faire évoluer</p><h3>HATEOAS:</h3><p> Laissez vos formats de données piloter les transitions d&#39;état dans vos applications. </p></div><div style="width:48%;"><img src="'+hp+'" style="width:100%;"></div></div></div>',2),_p=[gp];function vp(e,s){return y(),m("div",mp,_p)}const bp=w(yp,[["render",vp]]),wp="/rest/assets/house-6327d8b9.svg",$p={},qp={class:"slide"},Pp=S(`<div class="heading">RESTful - Adressabilité</div><div class="content"><div class="flex-container"><div style="width:62%;"><p> Dans le monde REST, l&#39;adressabilité est gérée par l&#39;utilisation d&#39;URI </p><h3>Exemple:</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            https:<span style="color:#333333;">//</span>jsonplaceholder<span style="color:#333333;">.</span>typicode<span style="color:#333333;">.</span>com<span style="color:#0000DD;background-color:#6bb0f5ff;">/todos/1</span></pre></div><p> Considérez l&#39;expression du chemin (&quot;/&quot;) comme la liste des répertoires d&#39;un fichier sur votre machine. </p><br><p> Le caractère &quot;?&quot; sépare le chemin d&#39;accès de la chaîne de requête. La chaîne de requête est une liste de paramètres représentés par des paires nom/valeur. Chaque paire est délimitée par le caractère &quot;&amp;&quot;. </p><h3>Exemple:</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">  https:<span style="color:#333333;">//</span>jsonplaceholder<span style="color:#333333;">.</span>typicode<span style="color:#333333;">.</span>com<span style="color:#0000DD;background-color:#6bb0f5ff;">/albums</span><span style="color:#FF0000;background-color:#FFAAAA;">?userId=1</span>
  https:<span style="color:#333333;">//</span>jsonplaceholder<span style="color:#333333;">.</span>typicode<span style="color:#333333;">.</span>com<span style="color:#0000DD;background-color:#6bb0f5ff;">/albums</span><span style="color:#FF0000;background-color:#FFAAAA;">?userId=1&amp;id=5</span></pre></div></div><div style="width:34%;"><img src="`+wp+'" style="width:100%;"></div></div></div>',2),xp=[Pp];function Sp(e,s){return y(),m("div",qp,xp)}const Tp=w($p,[["render",Sp]]),Cp={class:"slide"},Ep=d("div",{class:"heading"},"RESTful - Adressabilité",-1),kp={class:"content"},Rp=d("p",null," Exercice: Pouvez-vous faire une requête REST pour obtenir la photo avec l'identifiant 5 ? ",-1),Ap={__name:"SlidePresentation19",setup(e){return(s,t)=>(y(),m("div",Cp,[Ep,d("div",kp,[Rp,f(Pe,{link:"https://jsonplaceholder.typicode.com/photos"})])]))}},Bp={class:"slide"},Dp=d("div",{class:"heading"},"RESTful - Adressabilité",-1),Lp={class:"content"},jp=d("p",null," Exercice: Pouvez-vous faire une requête REST pour obtenir les photos dont l'identifiant de l'album associé est 10 ? ",-1),Ip={__name:"SlidePresentation20",setup(e){return(s,t)=>(y(),m("div",Bp,[Dp,d("div",Lp,[jp,f(Pe,{link:"https://jsonplaceholder.typicode.com/photos"})])]))}},Mp={},Op={class:"slide"},Fp=S('<div class="heading">RESTful - L&#39;interface uniforme et contraignante</div><div class="content"><p> Vous vous en tenez aux l&#39;ensemble fini d&#39;opérations du protocole d&#39;application sur lequel vous distribuez vos services. </p><table><tbody><tr><th>HTTP method</th><th>Description</th></tr><tr><td>GET</td><td>Envoyer une ressource nommée du serveur au client</td></tr><tr><td>POST</td><td> Envoyer les données du client dans une application passerelle serveur </td></tr><tr><td>PUT</td><td> Stocker les données du client dans une ressource serveur nommée </td></tr><tr><td>DELETE</td><td>Supprime la ressource nommée d&#39;un serveur.</td></tr><tr><td>HEAD</td><td> Envoyer uniquement les en-têtes HTTP de la réponse pour la ressource nommée. </td></tr></tbody></table></div>',2),Hp=[Fp];function Np(e,s){return y(),m("div",Op,Hp)}const Jp=w(Mp,[["render",Np]]),zp={},Up={class:"slide"},Xp=S('<div class="heading">RESTful - L&#39;interface uniforme et contraignante</div><div class="content"><h2>Pourquoi l&#39;interface uniforme est-elle importante ?</h2><br><h3>Familiarité:</h3><p> Pas besoin d&#39;un fichier de type IDL décrivant les méthodes disponibles. Juste d&#39;une bibliothèque client HTTP. </p><br><h3>Interopérabilité</h3><p> La plupart des langages de programmation disposent d&#39;une bibliothèque client HTTP. Cela signifie que les applications Java peuvent dialoguer avec les applications Python, par exemple. </p><br><h3>Extensibilité</h3><p> Ajoutez la sémantique de la mise en cache HTTP sémantique à vos services web et vous disposez d&#39;un moyen incroyablement riche de définir des politiques de mise en cache pour vos services. </p></div>',2),Wp=[Xp];function Vp(e,s){return y(),m("div",Up,Wp)}const Kp=w(zp,[["render",Vp]]),Gp={},Qp={class:"slide"},Yp=S(`<div class="heading">RESTful - L&#39;interface uniforme et contraignante</div><div class="content"><p> Puisque nous avons déjà fait du GET, nous pouvons directement faire un exemple avec du POST. Un post se présente comme suit: </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">          {
            <span style="color:#007700;">&quot;userId&quot;</span>: <span style="color:#0000DD;font-weight:bold;">1</span>,
            <span style="color:#007700;">&quot;id&quot;</span>: <span style="color:#0000DD;font-weight:bold;">1</span>,
            <span style="color:#007700;">&quot;title&quot;</span>: <span style="background-color:#fff0f0;">&quot;sunt aut facere repellat ... optio reprehenderit&quot;</span>,
            <span style="color:#007700;">&quot;body&quot;</span>: <span style="background-color:#fff0f0;">&quot;quia et suscipit\\nsuscipit ... rem eveniet architecto&quot;</span>
          }</pre></div><p> Je veux maintenant ajouter un nouveau post en utilisant la méthode HTTP POST </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">          {
            <span style="color:#007700;">&quot;userId&quot;</span>: <span style="background-color:#fff0f0;">&quot;1&quot;</span>,
            <span style="color:#007700;">&quot;title&quot;</span>: <span style="background-color:#fff0f0;">&quot;BGE Web Service cours&quot;</span>,
            <span style="color:#007700;">&quot;body&quot;</span>: <span style="background-color:#fff0f0;">&quot;Ce post n&#39;est pas vraiment persisté puisqu&#39;il ne s&#39;agit que d&#39;une API factice,</span>
                <span style="background-color:#fff0f0;"> mais cela montre tout de même comment cela fonctionne.&quot;</span>,
            <span style="color:#007700;">&quot;id&quot;</span>: <span style="color:#0000DD;font-weight:bold;">5001</span>
          }</pre></div></div>`,2),Zp=[Yp];function ed(e,s){return y(),m("div",Qp,Zp)}const sd=w(Gp,[["render",ed]]),td={class:"slide"},nd=d("div",{class:"heading"},"RESTful - L'interface uniforme et contraignante",-1),od={class:"content"},ld=d("p",null,' Sélectionnez POST et cliquez sur le bouton "Add parameter".Cela permet de spécifier les paires clé/valeur telles que le title, body et userId. ',-1),rd={__name:"SlidePresentation24",setup(e){return(s,t)=>(y(),m("div",td,[nd,d("div",od,[ld,f(Pe,{link:"https://jsonplaceholder.typicode.com/photos"})])]))}},ad="/rest/assets/BasketSeller-55ae681f.svg",id={},cd={class:"slide"},pd=S(`<div class="heading">RESTful - Orienté représentation</div><div class="content"><div class="flex-container"><div style="width:66%;"><p> Les représentations peuvent être XML, JSON, YAML, ou tout autre format que vous pouvez imaginer. </p><p> HTTP utilise l&#39;en-tête Content-Type pour indiquer au client ou au serveur le format des données qu&#39;il reçoit </p><h3>En voici quelques exemples:</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">        text<span style="color:#333333;">/</span>plain
        text<span style="color:#333333;">/</span>html
        application<span style="color:#333333;">/</span>xml
        text<span style="color:#333333;">/</span>html; charset<span style="color:#333333;">=</span>iso<span style="color:#6600EE;font-weight:bold;">-8859-1</span></pre></div><br><p> Avec l&#39;en-tête Accept, un client peut dresser la liste de ses formats de réponse préférés. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            Accept: application<span style="color:#333333;">/</span>json
            Accept: application<span style="color:#333333;">/</span>xml
            Accept: application<span style="color:#333333;">/</span>yaml</pre></div></div><div style="width:32%;"><img src="`+ad+'" style="width:100%;"></div></div></div>',2),dd=[pd];function ud(e,s){return y(),m("div",cd,dd)}const fd=w(id,[["render",ud]]),hd={class:"slide"},yd=d("div",{class:"heading"},"RESTful - Orienté représentation",-1),md={class:"content"},gd=d("p",null,"Voyons comment une api REST peut fonctionner avec JSON et XML.",-1),_d={__name:"SlidePresentation26",setup(e){return(s,t)=>(y(),m("div",hd,[yd,d("div",md,[gd,f(Pe,{link:"http://mockbin.com/request?foo=bar&foo=baz"})])]))}},vd="/rest/assets/eatingTail-1127c59e.svg",bd={},wd={class:"slide"},$d=S('<div class="heading">RESTful - Communiquer sans état</div><div class="content"><div class="flex-container"><div style="width:60%;"><h2> Avec REST, il n&#39;y a pas de session client sauvegardée sur le serveur. </h2><p> Le serveur ne fait qu&#39;enregistrer et gérer l&#39;état des ressources qu&#39;il expose. </p><p><span style="font-size:1.6rem;">→</span> Il y a 25-30 ans, les clients lourds s&#39;occupaient des sessions des clients. </p><p><span style="font-size:1.6rem;">→</span> Nous avons commencé à maintenir des sessions client sur le serveur en raison des limites du navigateur. </p><p><span style="font-size:1.6rem;">→</span> Vers 2008, les navigateurs sont devenus suffisamment sophistiqués pour maintenir leur propre état de session. </p><br><h2>La boucle est bouclée</h2></div><div style="width:38%;"><img src="'+vd+'" style="width:100%;"></div></div></div>',2),qd=[$d];function Pd(e,s){return y(),m("div",wd,qd)}const xd=w(bd,[["render",Pd]]),Sd={},Td={class:"slide"},Cd=S(`<div class="heading">RESTful - HATEOAS</div><div class="content"><h2>Hypermedia As The Engine Of Application State</h2><p>Permet de réaliser une navigation à travers l&#39;API</p><p> Chaque requête renvoyée par un serveur vous indique les nouvelles interactions que vous pouvez effectuer ensuite, ainsi que l&#39;endroit où vous devez vous rendre pour faire évoluer l&#39;état de vos applications. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">        <span style="color:#007700;">&quot;account&quot;</span>: {
            <span style="color:#007700;">&quot;account_number&quot;</span>: <span style="color:#0000DD;font-weight:bold;">12345</span>,
            <span style="color:#007700;">&quot;balance&quot;</span>: {
                <span style="color:#007700;">&quot;currency&quot;</span>: <span style="background-color:#fff0f0;">&quot;usd&quot;</span>,
                <span style="color:#007700;">&quot;value&quot;</span>: <span style="color:#6600EE;font-weight:bold;">100.00</span>
            },
            <span style="color:#007700;">&quot;links&quot;</span>: {
                <span style="color:#007700;">&quot;deposits&quot;</span>: <span style="background-color:#fff0f0;">&quot;/accounts/12345/deposits&quot;</span>,
                <span style="color:#007700;">&quot;withdrawals&quot;</span>: <span style="background-color:#fff0f0;">&quot;/accounts/12345/withdrawals&quot;</span>,
                <span style="color:#007700;">&quot;transfers&quot;</span>: <span style="background-color:#fff0f0;">&quot;/accounts/12345/transfers&quot;</span>,
            }
        }</pre></div></div>`,2),Ed=[Cd];function kd(e,s){return y(),m("div",Td,Ed)}const Rd=w(Sd,[["render",kd]]),Ad="/rest/assets/ajax-7a960e51.svg",Bd={},Dd={class:"slide"},Ld=S('<div class="heading">Javascript - AJAX</div><div class="content"><div class="flex-container"><div style="width:70%;"><h2>AJAX signifie <b>Asynchronous JavaScript and XML</b>.</h2><br><p> “L&#39;AJAX” est aujourd&#39;hui un terme générique utilisé pour désigner toute technique côté client (côté navigateur) permettant d&#39;envoyer et de récupérer des données depuis un serveur et de mettre à jour dynamiquement le DOM sans nécessiter l&#39;actualisation complète de la page. </p><h3>XMLHttpRequest</h3><p> La première façon populaire de faire de l&#39;ajax dans le navigateur </p><h3>jquery.ajax()</h3><p> jQuery.ajax() utilise en interne XMLHttpRequest mais est plus facile à utiliser. </p><h3>fetch API</h3><p> nouvelle API qui n&#39;utilise pas XMLHttpRequest mais qui est plus facile à utiliser </p><h2>fetch API est ma méthode préférée</h2></div><div style="width:23%;"><img src="'+Ad+'" style="width:100%;"></div></div></div>',2),jd=[Ld];function Id(e,s){return y(),m("div",Dd,jd)}const Md=w(Bd,[["render",Id]]),Od="/rest/assets/synchron-async-f18d6390.svg",Fd={},Hd={class:"slide"},Nd=S(`<div class="heading">Javascript - AJAX</div><div class="content"><div class="flex-container"><div style="width:53%;"><h2>Qu&#39;est-ce que le JavaScript asynchrone ?</h2><br><h3>Exemple de callback synchrone</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#008800;font-weight:bold;">function</span> callback(city) {
              console.log(city);
            }
            cities.forEach(callback);</pre></div><br><h3>Exemple de callback asynchrone</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#008800;font-weight:bold;">function</span> repositionElement() {
              console.log(<span style="background-color:#fff0f0;">&#39;repositionnement !&#39;</span>);
            }
            <span style="color:#007020;">window</span>.requestAnimationFrame(repositionElement);
            console.log(<span style="background-color:#fff0f0;">&#39;Je suis la dernière ligne du script&#39;</span>);
            <span style="color:#888888;">// Console output:</span>
            <span style="color:#888888;">// Je suis la dernière ligne du script</span>
            <span style="color:#888888;">// repositionnement !</span></pre></div></div><div style="width:45%;"><img src="`+Od+'" style="width:100%;"></div></div></div>',2),Jd=[Nd];function zd(e,s){return y(),m("div",Hd,Jd)}const Ud=w(Fd,[["render",zd]]),Xd={},Wd={class:"slide"},Vd=d("div",{class:"heading"},"Javascript - AJAX",-1),Kd=d("div",{class:"content"},[d("div",{class:"iFrame-container","data-link":"https://codesandbox.io/embed/async-requestanimationframe-w7g1w4?fontsize=14&hidenavigation=1&theme=dark"},[d("iframe",{src:"lightswitch.html",width:"100%",height:"100%",frameborder:"0",marginheight:"0",marginwidth:"0"},"Wird geladen…")])],-1),Gd=[Vd,Kd];function Qd(e,s){return y(),m("div",Wd,Gd)}const Yd=w(Xd,[["render",Qd]]),Zd="/rest/assets/ladies-hand-with-diamond-ring-c376c43e.svg",e3={},s3={class:"slide"},t3=S(`<div class="heading">Javascript - Promise</div><div class="content"><div class="flex-container"><div style="width:50%;"><p> Une Promise est un objet qui sert d&#39;espace réservé pour une valeur. Cette valeur est généralement le résultat d&#39;une opération asynchrone telle qu&#39;une requête HTTP ou la lecture d&#39;un fichier sur le disque. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">    <span style="color:#008800;font-weight:bold;">let</span> myPromise <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">new</span> Promise(<span style="color:#008800;font-weight:bold;">function</span>(myResolve, myReject) {
      <span style="color:#888888;">// &quot;Producing Code&quot; (Ça peut prendre du temps)</span>

    myResolve(); <span style="color:#888888;">// en cas de succès</span>
    myReject();  <span style="color:#888888;">// en cas d&#39;erreur</span>
    });

    <span style="color:#888888;">//&quot;Code consommé&quot; (doit attendre une promesse accomplie)</span>
    myPromise.then(
    <span style="color:#008800;font-weight:bold;">function</span>(value) { <span style="color:#888888;">/* code en cas de succès */</span> },
    <span style="color:#008800;font-weight:bold;">function</span>(error) { <span style="color:#888888;">/* code en cas d&#39;erreur */</span> }
    );</pre></div></div><div style="width:45%;"><br><img src="`+Zd+'" style="width:100%;"></div></div></div>',2),n3=[t3];function o3(e,s){return y(),m("div",s3,n3)}const l3=w(e3,[["render",o3]]),r3={},a3={class:"slide"},i3=d("div",{class:"heading"},"Javascript - Promise",-1),c3=d("div",{class:"content"},[d("p",null,"Examinons d'abord une manière familière de charger une image"),d("div",{class:"iFrame-container","data-link":"https://codesandbox.io/embed/callback-image-load-0429rj?fontsize=14&hidenavigation=1&theme=dark"},[d("iframe",{src:"lightswitch.html",width:"100%",height:"100%",frameborder:"0",marginheight:"0",marginwidth:"0"},"Wird geladen…")])],-1),p3=[i3,c3];function d3(e,s){return y(),m("div",a3,p3)}const u3=w(r3,[["render",d3]]),f3={},h3={class:"slide"},y3=d("div",{class:"heading"},"Javascript - Promise",-1),m3=d("div",{class:"content"},[d("p",null,"Faisons maintenant la même chose en utilisant Promise"),d("div",{class:"iFrame-container","data-link":"https://codesandbox.io/embed/holy-waterfall-ljtnzm?fontsize=14&hidenavigation=1&theme=dark"},[d("iframe",{src:"lightswitch.html",width:"100%",height:"100%",frameborder:"0",marginheight:"0",marginwidth:"0"},"Wird geladen…")])],-1),g3=[y3,m3];function _3(e,s){return y(),m("div",h3,g3)}const v3=w(f3,[["render",_3]]),b3="/rest/assets/promisestates-b97a0c17.svg",w3={},$3={class:"slide"},q3=S('<div class="heading">Javascript - Promise</div><div class="content"><div class="flex-container"><div style="width:40%;"><h2>Promise States</h2><br><h3>Pending:</h3><p>L&#39;opération n&#39;a pas commencé ou est en cours.</p><br><h3>Fulfilled:</h3><p>L&#39;opération est terminée</p><br><h3>Rejected:</h3><p>L&#39;opération n&#39;a pas pu être achevée.</p></div><div style="width:60%;"><img src="'+b3+'" style="width:100%;"></div></div></div>',2),P3=[q3];function x3(e,s){return y(),m("div",$3,P3)}const S3=w(w3,[["render",x3]]),T3={},C3={class:"slide"},E3=d("div",{class:"heading"},"Javascript - Promise",-1),k3=d("div",{class:"content"},[d("p",null,"Examinons une version simplifiée de la classe Promise"),d("div",{class:"iFrame-container","data-link":"https://onecompiler.com/embed/javascript/3z49g2khy"},[d("iframe",{src:"lightswitch.html",width:"100%",height:"100%",frameborder:"0",marginheight:"0",marginwidth:"0"},"Wird geladen…")])],-1),R3=[E3,k3];function A3(e,s){return y(),m("div",C3,R3)}const B3=w(T3,[["render",A3]]),D3={},L3={class:"slide"},j3=d("div",{class:"heading"},"Javascript - Promise",-1),I3=d("div",{class:"content"},[d("p",null," setTimout prend un callback. Comparons Promise et le callback classique "),d("div",{class:"iFrame-container","data-link":"https://onecompiler.com/embed/javascript/3z499a279"},[d("iframe",{src:"lightswitch.html",width:"100%",height:"100%",frameborder:"0",marginheight:"0",marginwidth:"0"},"Wird geladen…")])],-1),M3=[j3,I3];function O3(e,s){return y(),m("div",L3,M3)}const F3=w(D3,[["render",O3]]),H3="/rest/assets/Pyramid2-9d1cd16a.svg",N3={},J3={class:"slide"},z3=S(`<div class="heading">Javascript - Promise</div><div class="content"><div class="flex-container"><div style="width:50%;"><h2>Chaining Callbacks</h2><br><p> Autrefois, l&#39;exécution de plusieurs opérations asynchrones à la suite conduisait à la pyramide classique des callbacks. </p><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            doSomething(<span style="color:#008800;font-weight:bold;">function</span> (result) {
              doSomethingElse(result, <span style="color:#008800;font-weight:bold;">function</span> (newResult) {
                doThirdThing(newResult, <span style="color:#008800;font-weight:bold;">function</span> (finalResult) {
                  console.log(<span style="color:#FF0000;background-color:#FFAAAA;">\`</span>Got the <span style="color:#008800;font-weight:bold;">final</span> result<span style="color:#333333;">:</span> \${finalResult}<span style="color:#FF0000;background-color:#FFAAAA;">\`</span>);
                }, failureCallback);
              }, failureCallback);
            }, failureCallback);</pre></div></div><div style="width:48%;"><img src="`+H3+'" style="width:100%;"></div></div></div>',2),U3=[z3];function X3(e,s){return y(),m("div",J3,U3)}const W3=w(N3,[["render",X3]]),V3="/rest/assets/promisechain-364b1360.svg",K3={},G3={class:"slide"},Q3=S(`<div class="heading">Javascript - Promise</div><div class="content"><div class="flex-container"><div style="width:35%;"><h2>Chaining Promises</h2><br><p> Avec les promesses, nous y parvenons en créant une chaîne de promesses. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">        doSomething()
            .then(<span style="color:#008800;font-weight:bold;">function</span> (result) {
              <span style="color:#008800;font-weight:bold;">return</span> doSomethingElse(result);
            })
            .then(<span style="color:#008800;font-weight:bold;">function</span> (newResult) {
              <span style="color:#008800;font-weight:bold;">return</span> doThirdThing(newResult);
            })
            .then(<span style="color:#008800;font-weight:bold;">function</span> (finalResult) {
              console.log(<span style="color:#FF0000;background-color:#FFAAAA;">\`</span>Got the <span style="color:#008800;font-weight:bold;">final</span> result<span style="color:#333333;">:</span> \${finalResult}<span style="color:#FF0000;background-color:#FFAAAA;">\`</span>);
            })
            .<span style="color:#008800;font-weight:bold;">catch</span>(failureCallback);</pre></div></div><div style="width:63%;"><br><img src="`+V3+'" style="width:100%;"></div></div></div>',2),Y3=[Q3];function Z3(e,s){return y(),m("div",G3,Y3)}const eu=w(K3,[["render",Z3]]),su={},tu={class:"slide"},nu=d("div",{class:"heading"},"RESTful Javascript - AJAX",-1),ou=d("div",{class:"content"},[d("p",null," Voyons comment le chaînage de promesses est utilisé pour le fetch API "),d("div",{class:"iFrame-container","data-link":"https://replit.com/@DupondDupont/APIDemo?embed=1"},[d("iframe",{src:"lightswitch.html",width:"100%",height:"97%",frameborder:"0",marginheight:"0",marginwidth:"0"},"Wird geladen…")])],-1),lu=[nu,ou];function ru(e,s){return y(),m("div",tu,lu)}const au=w(su,[["render",ru]]),iu={},cu={class:"slide"},pu=d("div",{class:"heading"},"RESTful Javascript - AJAX",-1),du=d("div",{class:"content"},[d("h2",null,[hs(` Exercice: Pouvez-vous me faire un tableau de présentation à partir des données "posts" similaire à ce que j'ai fait dans la diapositive précédente ? `),d("a",{href:"https://jsonplaceholder.typicode.com/posts"},"https://jsonplaceholder.typicode.com/posts")]),d("br"),d("p",null,"Vous pouvez copier-coller et adapter ce que j'ai fait"),d("br"),d("h2",null,[hs(" Bonus Exercice: utilisez l'api photos et générez une galerie "),d("a",{href:"https://jsonplaceholder.typicode.com/photos"},"https://jsonplaceholder.typicode.com/photos")])],-1),uu=[pu,du];function fu(e,s){return y(),m("div",cu,uu)}const hu=w(iu,[["render",fu]]),yu={},mu={class:"slide"},gu=d("div",{class:"heading"},"RESTful Javascript - AJAX",-1),_u=d("div",{class:"content"},[d("p",null," C'est une galerie de photos boiteuse et je l'ai réduite à seulement 20 images, mais vous voyez l'idée. "),d("div",{class:"iFrame-container","data-link":"https://replit.com/@DupondDupont/photoGalery?embed=1"},[d("iframe",{src:"lightswitch.html",width:"100%",height:"97%",frameborder:"0",marginheight:"0",marginwidth:"0"},"Wird geladen…")])],-1),vu=[gu,_u];function bu(e,s){return y(),m("div",mu,vu)}const wu=w(yu,[["render",bu]]),zo="/rest/assets/classDiaModel-2aca773f.svg",$u={},qu={class:"slide"},Pu=S(`<div class="heading">Conception de services RESTful</div><div class="content"><div class="flex-container"><div style="width:55%;"><h2>Modéliser les URI</h2><br><p> Nous voulons naviguer la personne et le compte bancaire dans notre REST API. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#0066BB;font-weight:bold;">/persons</span>
            <span style="color:#0066BB;font-weight:bold;">/persons/{id}</span>
            <span style="color:#0066BB;font-weight:bold;">/bankaccount</span>
            <span style="color:#0066BB;font-weight:bold;">/bankaccount/{id}</span></pre></div><br><p>Ces 4 adresses sont tout ce dont nous avons besoin</p></div><div style="width:42%;"><img src="`+zo+'" style="width:100%;"></div></div></div>',2),xu=[Pu];function Su(e,s){return y(),m("div",qu,xu)}const Tu=w($u,[["render",Su]]),Cu={},Eu={class:"slide"},ku=S(`<div class="heading">Conception de services RESTful</div><div class="content"><div class="flex-container"><div style="width:55%;"><h2>Définition du format des données</h2><p>Nous allons travailler avec JSON pour l&#39;instant</p><h3>Person</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">              {
                <span style="color:#007700;">&quot;personNum&quot;</span>: <span style="color:#0000DD;font-weight:bold;">1</span>,
                <span style="color:#007700;">&quot;firstName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Kilian&quot;</span>,
                <span style="color:#007700;">&quot;lastName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Schropp&quot;</span>,
                <span style="color:#007700;">&quot;age&quot;</span>: <span style="color:#0000DD;font-weight:bold;">30</span>
              }</pre></div><br><h3>BankAccount</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">              {
                <span style="color:#007700;">&quot;accountIdentifier&quot;</span>: <span style="background-color:#fff0f0;">&quot;123456&quot;</span>,
                <span style="color:#007700;">&quot;accountOwnerID&quot;</span>: <span style="color:#0000DD;font-weight:bold;">1</span>, 
                <span style="color:#007700;">&quot;bankConsultantID&quot;</span>: <span style="color:#0000DD;font-weight:bold;">2</span>, 
                <span style="color:#007700;">&quot;bankName&quot;</span>: <span style="background-color:#fff0f0;">&quot;BGE bank&quot;</span>
              }</pre></div></div><div style="width:42%;"><img src="`+zo+'" style="width:100%;"></div></div></div>',2),Ru=[ku];function Au(e,s){return y(),m("div",Eu,Ru)}const Bu=w(Cu,[["render",Au]]),Du={},Lu={class:"slide"},ju=S(`<div class="heading">Conception de services RESTful</div><div class="content"><div class="flex-container"><div style="width:48%;"><h2>Consultation des personnes</h2><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#007700;">GET</span> /persons HTTP/1.1</pre></div><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            [
              {
                <span style="color:#007700;">&quot;personNum&quot;</span>: <span style="color:#0000DD;font-weight:bold;">1</span>,
                <span style="color:#007700;">&quot;firstName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Kilian&quot;</span>,
                <span style="color:#007700;">&quot;lastName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Schropp&quot;</span>,
                <span style="color:#007700;">&quot;age&quot;</span>: <span style="color:#0000DD;font-weight:bold;">28</span>
              },
              {
                <span style="color:#007700;">&quot;personNum&quot;</span>: <span style="color:#0000DD;font-weight:bold;">2</span>,
                <span style="color:#007700;">&quot;firstName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Jane&quot;</span>,
                <span style="color:#007700;">&quot;lastName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Doe&quot;</span>,
                <span style="color:#007700;">&quot;age&quot;</span>: <span style="color:#0000DD;font-weight:bold;">25</span>
              },
              ...
            ]</pre></div></div><div style="width:48%;"><h2>Consultation des bankaccounts</h2><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#007700;">GET</span> /bankaccounts HTTP/1.1</pre></div><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            [
              {
                <span style="color:#007700;">&quot;accountIdentifier&quot;</span>: <span style="background-color:#fff0f0;">&quot;123456&quot;</span>,
                <span style="color:#007700;">&quot;accountOwnerID&quot;</span>: <span style="color:#0000DD;font-weight:bold;">1</span>, 
                <span style="color:#007700;">&quot;bankConsultantID&quot;</span>: <span style="color:#0000DD;font-weight:bold;">2</span>, 
                <span style="color:#007700;">&quot;bankName&quot;</span>: <span style="background-color:#fff0f0;">&quot;BGE bank&quot;</span>
              },
              {
                <span style="color:#007700;">&quot;accountIdentifier&quot;</span>: <span style="background-color:#fff0f0;">&quot;123457&quot;</span>,
                <span style="color:#007700;">&quot;accountOwnerID&quot;</span>: <span style="color:#0000DD;font-weight:bold;">3</span>, 
                <span style="color:#007700;">&quot;bankConsultantID&quot;</span>: <span style="color:#0000DD;font-weight:bold;">4</span>, 
                <span style="color:#007700;">&quot;bankName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Kilian bank or whatever&quot;</span>
              },
              ...
            ]</pre></div></div></div></div>`,2),Iu=[ju];function Mu(e,s){return y(),m("div",Lu,Iu)}const Ou=w(Du,[["render",Mu]]),os="/rest/assets/zip-file-64b1e69f.svg",Fu={},Hu={class:"slide"},Nu=S('<div class="heading">RESTful - Réalisation</div><div class="content"><div class="flex-container" style="overflow-y:scroll;height:100%;"><div style="width:48%;"><h2>Rapide et sale</h2><br><p> L&#39;exemple suivant suppose des connaissances en matière de JSP et de Servlets. Je ne les expliquerai pas en détail puisque ce n&#39;est pas le but de ce cours. </p><br><p>REST peut être construit au-dessus du HttpServlet.</p><a href="solutions/rest/REST-simple-solution.zip" download="REST-simple-solution.zip"><img src="'+os+`" style="width:20%;">Download zip exemple</a></div><div style="width:48%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#555555;font-weight:bold;">@WebServlet</span><span style="color:#333333;">(</span>
                    name <span style="color:#333333;">=</span> <span style="background-color:#fff0f0;">&quot;PersonServlet&quot;</span><span style="color:#333333;">,</span>
                    urlPatterns <span style="color:#333333;">=</span> <span style="color:#333333;">{</span><span style="background-color:#fff0f0;">&quot;/persons&quot;</span><span style="color:#333333;">}</span>
                <span style="color:#333333;">)</span>
            <span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">PersonServlet</span> <span style="color:#008800;font-weight:bold;">extends</span> HttpServlet <span style="color:#333333;">{</span>

              ...

              <span style="color:#555555;font-weight:bold;">@Override</span>
              <span style="color:#008800;font-weight:bold;">protected</span> <span style="color:#333399;font-weight:bold;">void</span> <span style="color:#0066BB;font-weight:bold;">doGet</span><span style="color:#333333;">(</span>HttpServletRequest request<span style="color:#333333;">,</span> HttpServletResponse response<span style="color:#333333;">)</span>
                        <span style="color:#008800;font-weight:bold;">throws</span> ServletException<span style="color:#333333;">,</span> IOException <span style="color:#333333;">{</span>
                    response<span style="color:#333333;">.</span><span style="color:#0000CC;">setContentType</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;application/json&quot;</span><span style="color:#333333;">);</span>
                    response<span style="color:#333333;">.</span><span style="color:#0000CC;">setHeader</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;Access-Control-Allow-Origin&quot;</span><span style="color:#333333;">,</span> <span style="background-color:#fff0f0;">&quot;*&quot;</span><span style="color:#333333;">);</span>
                    
                    ObjectMapper objectMapper <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">new</span> ObjectMapper<span style="color:#333333;">();</span>
                    ObjectWriter objectWriter <span style="color:#333333;">=</span> objectMapper<span style="color:#333333;">.</span><span style="color:#0000CC;">writerWithDefaultPrettyPrinter</span><span style="color:#333333;">();</span>
                    String json <span style="color:#333333;">=</span> objectWriter<span style="color:#333333;">.</span><span style="color:#0000CC;">writeValueAsString</span><span style="color:#333333;">(</span>persons<span style="color:#333333;">);</span>
                    PrintWriter out <span style="color:#333333;">=</span> response<span style="color:#333333;">.</span><span style="color:#0000CC;">getWriter</span><span style="color:#333333;">();</span>
                    out<span style="color:#333333;">.</span><span style="color:#0000CC;">println</span><span style="color:#333333;">(</span>json<span style="color:#333333;">);</span>
                <span style="color:#333333;">}</span>
              
              <span style="color:#555555;font-weight:bold;">@Override</span>
                <span style="color:#008800;font-weight:bold;">protected</span> <span style="color:#333399;font-weight:bold;">void</span> <span style="color:#0066BB;font-weight:bold;">doPost</span><span style="color:#333333;">(</span>HttpServletRequest request<span style="color:#333333;">,</span> HttpServletResponse response<span style="color:#333333;">)</span> <span style="color:#008800;font-weight:bold;">throws</span> ServletException<span style="color:#333333;">,</span> IOException <span style="color:#333333;">{</span>
                    response<span style="color:#333333;">.</span><span style="color:#0000CC;">setContentType</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;application/json&quot;</span><span style="color:#333333;">);</span>
                    response<span style="color:#333333;">.</span><span style="color:#0000CC;">setHeader</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;Access-Control-Allow-Origin&quot;</span><span style="color:#333333;">,</span> <span style="background-color:#fff0f0;">&quot;*&quot;</span><span style="color:#333333;">);</span>
                    <span style="color:#008800;font-weight:bold;">final</span> String firstName <span style="color:#333333;">=</span> request<span style="color:#333333;">.</span><span style="color:#0000CC;">getParameter</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;fname&quot;</span><span style="color:#333333;">);</span>
                    <span style="color:#008800;font-weight:bold;">final</span> String lastName <span style="color:#333333;">=</span> request<span style="color:#333333;">.</span><span style="color:#0000CC;">getParameter</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;lname&quot;</span><span style="color:#333333;">);</span>
                    <span style="color:#008800;font-weight:bold;">final</span> <span style="color:#333399;font-weight:bold;">int</span> age <span style="color:#333333;">=</span> Integer<span style="color:#333333;">.</span><span style="color:#0000CC;">parseInt</span><span style="color:#333333;">(</span>request<span style="color:#333333;">.</span><span style="color:#0000CC;">getParameter</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;age&quot;</span><span style="color:#333333;">));</span>
                    <span style="color:#333399;font-weight:bold;">long</span> personNum <span style="color:#333333;">=</span> persons<span style="color:#333333;">.</span><span style="color:#0000CC;">size</span><span style="color:#333333;">()</span> <span style="color:#333333;">+</span> <span style="color:#0000DD;font-weight:bold;">1</span><span style="color:#333333;">;</span>
                    Person person <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">new</span> Person<span style="color:#333333;">(</span>personNum<span style="color:#333333;">,</span> firstName<span style="color:#333333;">,</span> lastName<span style="color:#333333;">,</span> age<span style="color:#333333;">);</span>
                    persons<span style="color:#333333;">.</span><span style="color:#0000CC;">add</span><span style="color:#333333;">(</span>person<span style="color:#333333;">);</span>
                    
                    ObjectMapper mapper <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">new</span> ObjectMapper<span style="color:#333333;">();</span>
                    ObjectWriter objectWriter <span style="color:#333333;">=</span> mapper<span style="color:#333333;">.</span><span style="color:#0000CC;">writerWithDefaultPrettyPrinter</span><span style="color:#333333;">();</span>
                    String json <span style="color:#333333;">=</span> objectWriter<span style="color:#333333;">.</span><span style="color:#0000CC;">writeValueAsString</span><span style="color:#333333;">(</span>person<span style="color:#333333;">);</span>
                    PrintWriter out <span style="color:#333333;">=</span> response<span style="color:#333333;">.</span><span style="color:#0000CC;">getWriter</span><span style="color:#333333;">();</span>
                    out<span style="color:#333333;">.</span><span style="color:#0000CC;">println</span><span style="color:#333333;">(</span>json<span style="color:#333333;">);</span>
              <span style="color:#333333;">}</span>
            <span style="color:#333333;">}</span></pre></div></div></div></div>`,2),Ju=[Nu];function zu(e,s){return y(),m("div",Hu,Ju)}const Uu=w(Fu,[["render",zu]]),Xu={class:"slide"},Wu=d("div",{class:"heading"},"RESTful - Réalisation",-1),Vu={class:"content"},Ku=d("p",null,` Exercice: Lancez le projet et essayez d'appeler le point de terminaison REST "/persons" à l'aide de la méthode GET. `,-1),Gu={__name:"SlidePresentation47",setup(e){return(s,t)=>(y(),m("div",Xu,[Wu,d("div",Vu,[Ku,f(Pe,{link:"http://localhost:8080/persons"})])]))}},Qu={class:"slide"},Yu=d("div",{class:"heading"},"RESTful - Réalisation",-1),Zu={class:"content"},ef=d("p",null," Exercice: Essayez de créer une nouvelle personne en utilisant la méthode POST. Vérifiez avec la méthode GET que la nouvelle personne a été créée correctement. ",-1),sf={__name:"SlidePresentation48",setup(e){return(s,t)=>(y(),m("div",Qu,[Yu,d("div",Zu,[ef,f(Pe,{link:"http://localhost:8080/persons"})])]))}},tf={class:"slide"},nf=d("div",{class:"heading"},"RESTful - Réalisation",-1),of={class:"content"},lf=d("p",null," Bonus Exercice: Ajouter le modèle BankAccount au projet et créer un point de terminaison GET et POST pour interroger les comptes bancaires et les créer (comme je l'ai fait dans Person). ",-1),rf={__name:"SlidePresentation49",setup(e){return(s,t)=>(y(),m("div",tf,[nf,d("div",of,[lf,f(Pe,{link:"http://localhost:8080/persons"})])]))}},af="/rest/assets/machinetranslation-1926-00da545e.svg",cf={},pf={class:"slide"},df=S('<div class="heading">RESTful - JAX RS</div><div class="content"><div class="flex-container"><div style="width:67%;"><p> Les servlets nécessitent beaucoup de code de base pour transférer des informations vers et depuis une requête HTTP. </p><p> JAX-RS a été définie pour simplifier la mise en œuvre des services RESTful </p><h3><span style="font-size:2rem;">↪</span> Annotations sur les POJOs </h3><h3><span style="font-size:2rem;">↪</span> Lier des URI et des opérations HTTP à des méthodes </h3><h3><span style="font-size:2rem;">↪</span> Message Body Readers et Writers </h3><h3><span style="font-size:2rem;">↪</span> Associer une exception à un code de réponse HTTP et à un message </h3><h3><span style="font-size:2rem;">↪</span> De belles facilités pour HTTP négociation du contenu </h3></div><div style="width:31%;"><img src="'+af+'" style="width:100%;"></div></div></div>',2),uf=[df];function ff(e,s){return y(),m("div",pf,uf)}const hf=w(cf,[["render",ff]]),yf={},mf={class:"slide"},gf=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><h2>Classe de données</h2><p>Dans notre cas, les classes de données sont Person et BankAccount.</p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">        <span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">Person</span> <span style="color:#333333;">{</span>
          <span style="color:#008800;font-weight:bold;">private</span> <span style="color:#333399;font-weight:bold;">long</span> personNum<span style="color:#333333;">;</span>
          <span style="color:#008800;font-weight:bold;">private</span> String firstName<span style="color:#333333;">;</span>
          <span style="color:#008800;font-weight:bold;">private</span> String lastName<span style="color:#333333;">;</span>
          <span style="color:#008800;font-weight:bold;">private</span> <span style="color:#333399;font-weight:bold;">int</span> age<span style="color:#333333;">;</span>              
          <span style="color:#008800;font-weight:bold;">public</span> <span style="color:#0066BB;font-weight:bold;">Person</span><span style="color:#333333;">(</span><span style="color:#333399;font-weight:bold;">long</span> personNum<span style="color:#333333;">,</span> String firstName<span style="color:#333333;">,</span> String lastName<span style="color:#333333;">,</span> <span style="color:#333399;font-weight:bold;">int</span> age<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
              <span style="color:#008800;font-weight:bold;">this</span><span style="color:#333333;">.</span><span style="color:#0000CC;">firstName</span> <span style="color:#333333;">=</span> firstName<span style="color:#333333;">;</span>
              <span style="color:#008800;font-weight:bold;">this</span><span style="color:#333333;">.</span><span style="color:#0000CC;">lastName</span> <span style="color:#333333;">=</span> lastName<span style="color:#333333;">;</span>
              <span style="color:#008800;font-weight:bold;">this</span><span style="color:#333333;">.</span><span style="color:#0000CC;">age</span> <span style="color:#333333;">=</span> age<span style="color:#333333;">;</span>
              <span style="color:#008800;font-weight:bold;">this</span><span style="color:#333333;">.</span><span style="color:#0000CC;">personNum</span> <span style="color:#333333;">=</span> personNum<span style="color:#333333;">;</span>
          <span style="color:#333333;">}</span>

          <span style="color:#333333;">...</span>
        <span style="color:#333333;">}</span></pre></div></div>`,2),_f=[gf];function vf(e,s){return y(),m("div",mf,_f)}const bf=w(yf,[["render",vf]]),wf={},$f={class:"slide"},qf=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><div class="flex-container"><div style="width:50%;"><p> JAX-RS définit cinq annotations qui correspondent à des opérations HTTP spécifiques </p><h3>@javax.ws.rs.GET</h3><h3>@javax.ws.rs.PUT</h3><h3>@javax.ws.rs.POST</h3><h3>@javax.ws.rs.DELETE</h3><h3>@javax.ws.rs.HEAD</h3><br></div><div style="width:45%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">          <span style="color:red;font-weight:bold;">@GET</span>
          <span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonList</span><span style="color:#333333;">()</span> <span style="color:#333333;">{</span>
            ...
          <span style="color:#333333;">}</span></pre></div></div></div><p> Lorsqu&#39;une requête HTTP GET arrive, jax-rs trouve la méthode qu&#39;il doit appeler en se servant de l&#39;annotation @GET. </p></div>`,2),Pf=[qf];function xf(e,s){return y(),m("div",$f,Pf)}const Sf=w(wf,[["render",xf]]),Tf={},Cf={class:"slide"},Ef=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><div class="flex-container"><div style="width:48%;"><h2>@Path</h2><br><p> L&#39;annotation @javax.ws.rs.Path dans JAX-RS est utilisée pour définir un modèle de correspondance URI pour les requêtes HTTP entrantes. </p><p> Elle peut être placée sur une classe ou sur une ou plusieurs méthodes Java Java </p><p>Dans cet exemple, j&#39;ai deux points terminaux</p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#333333;">/</span>personnes
            <span style="color:#333333;">/</span>personnes<span style="color:#333333;">/</span>underaged</pre></div></div><div style="width:48%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:red;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/persons&quot;</span><span style="color:#333333;">)</span>
            <span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">PersonResource</span> <span style="color:#333333;">{</span>
              
              <span style="color:#555555;font-weight:bold;">@GET</span>
              <span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonList</span><span style="color:#333333;">()</span> <span style="color:#333333;">{</span>
                <span style="color:#333333;">...</span>
              <span style="color:#333333;">}</span>
              
              <span style="color:#555555;font-weight:bold;">@GET</span>
              <span style="color:red;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;underaged&quot;</span><span style="color:#333333;">)</span>
              <span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getUnderagedPersonList</span><span style="color:#333333;">()</span> <span style="color:#333333;">{</span>
                <span style="color:#333333;">...</span>
              <span style="color:#333333;">}</span>
            <span style="color:#333333;">}</span></pre></div></div></div></div>`,2),kf=[Ef];function Rf(e,s){return y(),m("div",Cf,kf)}const Af=w(Tf,[["render",Rf]]),Bf={},Df={class:"slide"},Lf=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><div class="flex-container"><div style="width:43%;"><h2>@Path Expressions</h2><br><p> La valeur de l&#39;annotation @Path est généralement une simple chaîne de caractères, mais vous pouvez également définir des expressions plus complexes pour répondre à vos besoins en matière de recherche d&#39;URI </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#333333;">/</span>personnes<span style="color:#333333;">/</span><span style="color:#0000DD;font-weight:bold;">4</span>
            <span style="color:#333333;">/</span>personnes<span style="color:#333333;">/</span>kilian<span style="color:#333333;">-</span>schropp</pre></div></div><div style="width:55%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">        <span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/persons&quot;</span><span style="color:#333333;">)</span>
        <span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">PersonResource</span> <span style="color:#333333;">{</span>
          
          <span style="color:#555555;font-weight:bold;">@GET</span>
          <span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:red;">&quot;{id}&quot;</span><span style="color:#333333;">)</span>
          <span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonById</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;id&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
            <span style="color:#333333;">...</span>
          <span style="color:#333333;">}</span>
          
          <span style="color:#555555;font-weight:bold;">@GET</span>
          <span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:red;">&quot;{firstname}-{lastname}&quot;</span><span style="color:#333333;">)</span>
          <span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonByName</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;firstname&quot;</span><span style="color:#333333;">)</span> String first<span style="color:#333333;">,</span>
          <span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;lastname&quot;</span><span style="color:#333333;">)</span> String last<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
            <span style="color:#333333;">...</span>
          <span style="color:#333333;">}</span>
        <span style="color:#333333;">}</span></pre></div></div></div></div>`,2),jf=[Lf];function If(e,s){return y(),m("div",Df,jf)}const Mf=w(Bf,[["render",If]]),Of="/rest/assets/injection-857849e8.svg",Ff={},Hf={class:"slide"},Nf=S('<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><h2> Les annotations JAX-RS peuvent injecter un grand nombre de choses différentes. </h2><br><div class="flex-container"><div style="width:63%;"><p><b>@javax.ws.rs.PathParam: </b> paramètres du modèle URI</p><p><b>@javax.ws.rs.MatrixParam: </b> paramètres de la matrice URI </p><p><b>@javax.ws.rs.QueryParam: </b> paramètres de requête URI</p><p><b>@javax.ws.rs.FormParam: </b> données d&#39;un formulaire </p><p><b>@javax.ws.rs.HeaderParam: </b> en-têtes de requête HTTP</p><p><b>@javax.ws.rs.CookieParam: </b> cookies HTTP définis par le client. </p><p><b>@javax.ws.rs.core.Context</b> injecter divers objets d&#39;aide et d&#39;information fournis par l&#39;API JAX-RS </p></div><div style="width:35%;"><img src="'+Of+'" style="width:100%;"></div></div></div>',2),Jf=[Nf];function zf(e,s){return y(),m("div",Hf,Jf)}const Uf=w(Ff,[["render",zf]]),Xf="/rest/assets/syringe-0cdcdc13.svg",Wf={},Vf={class:"slide"},Kf=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><div class="flex-container"><div style="width:52%;"><h2>@PathParam</h2><br><p> Nous avons déjà vu @PathParam dans les extraits de code précédents, mais qu&#39;est-ce que c&#39;est en fait ? </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#555555;font-weight:bold;">@GET</span>
            <span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;{id}&quot;</span><span style="color:#333333;">)</span>
            <span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonById</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;id&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
              <span style="color:#333333;">...</span>
            <span style="color:#333333;">}</span>
            </pre></div><br><h3> @PathParam permet d&#39;injecter la valeur des paramètres de chemin URI nommés qui ont été définis dans les expressions @Path. </h3><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#333333;">GET /</span>personnes<span style="color:#333333;">/</span><span style="color:#0000DD;font-weight:bold;">4</span></pre></div></div><div style="width:47%;"><img src="`+Xf+'" style="width:100%;"></div></div></div>',2),Gf=[Kf];function Qf(e,s){return y(),m("div",Vf,Gf)}const Yf=w(Wf,[["render",Qf]]),Zf="/rest/assets/path-37fc6f46.svg",eh={},sh={class:"slide"},th=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><div class="flex-container"><div style="width:52%;"><h2>Plus d&#39;un @PathParam</h2><br><p> Vous pouvez faire référence à plus d&#39;un paramètre de chemin d&#39;accès URI dans vos méthodes Java. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">        <span style="color:#555555;font-weight:bold;">@GET</span>
        <span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;{firstname}-{lastname}&quot;</span><span style="color:#333333;">)</span>
        <span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonByName</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;firstname&quot;</span><span style="color:#333333;">)</span> String first<span style="color:#333333;">,</span>
        <span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;lastname&quot;</span><span style="color:#333333;">)</span> String last<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
          <span style="color:#333333;">...</span>
        <span style="color:#333333;">}</span></pre></div><br><p>Reprenons l&#39;exemple précédent avec le nom et le prénom</p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#333333;">GET /</span>personnes<span style="color:#333333;">/</span>kilian<span style="color:#333333;">-</span>schropp</pre></div></div><div style="width:45%;"><img src="`+Zf+'" style="width:100%;"></div></div></div>',2),nh=[th];function oh(e,s){return y(),m("div",sh,nh)}const lh=w(eh,[["render",oh]]),rh="/rest/assets/matrix-dd1344e5.svg",ah={},ih={class:"slide"},ch=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><div class="flex-container"><div style="width:71%;"><h2>@MatrixParam</h2><br><p> La spécification JAX-RS vous permet d&#39;injecter des valeurs de paramètres de matrice directement par le biais de l&#39;annotation @javax.ws.rs.MatrixParam. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/{make}&quot;</span><span style="color:#333333;">)</span>
            <span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">CarResource</span> <span style="color:#333333;">{</span>
                <span style="color:#555555;font-weight:bold;">@GET</span>
                <span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/{model}/{year}&quot;</span><span style="color:#333333;">)</span>
                <span style="color:#555555;font-weight:bold;">@Produces</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;image/jpeg&quot;</span><span style="color:#333333;">)</span>
                <span style="color:#008800;font-weight:bold;">public</span> Jpeg <span style="color:#0066BB;font-weight:bold;">getPicture</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;make&quot;</span><span style="color:#333333;">)</span> String make<span style="color:#333333;">,</span>
                                  <span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;model&quot;</span><span style="color:#333333;">)</span> String model<span style="color:#333333;">,</span>
                                  <span style="color:#555555;font-weight:bold;">@MatrixParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;color&quot;</span><span style="color:#333333;">)</span> String color<span style="color:#333333;">){</span>
                    <span style="color:#333333;">...</span>
                <span style="color:#333333;">}</span></pre></div><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            GET <span style="color:#333333;">/</span>mercedes<span style="color:#333333;">/</span>e55<span style="color:#333333;">/</span><span style="color:#0000DD;font-weight:bold;">2006</span><span style="color:#333333;">/</span>interior<span style="color:#333333;">;</span>color<span style="color:#333333;">=</span>tan</pre></div></div><div style="width:28%;"><img src="`+rh+'" style="width:100%;"></div></div></div>',2),ph=[ch];function dh(e,s){return y(),m("div",ih,ph)}const uh=w(ah,[["render",dh]]),fh="/rest/assets/grandopening-44434c4e.svg",hh={},yh={class:"slide"},mh=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><h2>@QueryParam</h2><br><p> L&#39;annotation @javax.ws.rs.QueryParam vous permet d&#39;injecter des paramètres de requête URI individuels dans vos paramètres Java. </p><div class="flex-container"><div style="width:48%;"><p> Supposons que nous voulions un sous-ensemble de toutes les personnes </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GET</span>
<span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonList</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@QueryParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;start&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> start<span style="color:#333333;">,</span>
<span style="color:#555555;font-weight:bold;">@QueryParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;size&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> size<span style="color:#333333;">))</span> <span style="color:#333333;">{</span>
    <span style="color:#333333;">...</span>
<span style="color:#333333;">}</span></pre></div><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            GET <span style="color:#333333;">/</span>persons<span style="color:#333333;">?</span>start<span style="color:#333333;">=</span><span style="color:#0000DD;font-weight:bold;">0</span><span style="color:#333333;">&amp;</span>size<span style="color:#333333;">=</span><span style="color:#0000DD;font-weight:bold;">10</span></pre></div></div><div style="width:50%;"><img src="`+fh+'" style="width:100%;"></div></div></div>',2),gh=[mh];function _h(e,s){return y(),m("div",yh,gh)}const vh=w(hh,[["render",_h]]),bh={},wh={class:"slide"},$h=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><h2>@Context</h2><br><p> Vous pouvez injecter des instances d&#39;UriInfo en utilisant l&#39;annotation @javax.ws.rs.core.Context. </p><p>Reprenons l&#39;exemple précédent</p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            <span style="color:#555555;font-weight:bold;">@GET</span>
            <span style="color:#555555;font-weight:bold;">@Produces</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;application/xml&quot;</span><span style="color:#333333;">)</span>
            <span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonList</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@Context</span> UriInfo info<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
            String start <span style="color:#333333;">=</span> info<span style="color:#333333;">.</span><span style="color:#0000CC;">getQueryParameters</span><span style="color:#333333;">().</span><span style="color:#0000CC;">getFirst</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;start&quot;</span><span style="color:#333333;">);</span>
            String size <span style="color:#333333;">=</span> info<span style="color:#333333;">.</span><span style="color:#0000CC;">getQueryParameters</span><span style="color:#333333;">().</span><span style="color:#0000CC;">getFirst</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;size&quot;</span><span style="color:#333333;">);</span>
              <span style="color:#333333;">...</span>
            <span style="color:#333333;">}</span></pre></div><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            GET <span style="color:#333333;">/</span>persons<span style="color:#333333;">?</span>start<span style="color:#333333;">=</span><span style="color:#0000DD;font-weight:bold;">0</span><span style="color:#333333;">&amp;</span>size<span style="color:#333333;">=</span><span style="color:#0000DD;font-weight:bold;">10</span></pre></div></div>`,2),qh=[$h];function Ph(e,s){return y(),m("div",wh,qh)}const xh=w(bh,[["render",Ph]]),Sh={},Th={class:"slide"},Ch=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><h2>@FormParam</h2><br><p> L&#39;annotation @javax.ws.rs.FormParam est utilisée pour accéder aux corps de requête codés en format application/x-www-formurlencoded. En d&#39;autres mots, elle est utilisée pour accéder aux entrées individuelles postées par un document de formulaire HTML. </p><div class="flex-container"><div style="width:49%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#007700;">&lt;form</span> <span style="color:#0000CC;">action=</span><span style="background-color:#fff0f0;">&quot;http://example.com/persons&quot;</span> <span style="color:#0000CC;">method=</span><span style="background-color:#fff0f0;">&quot;post&quot;</span><span style="color:#007700;">&gt;</span>
  <span style="color:#007700;">&lt;label</span> <span style="color:#0000CC;">for=</span><span style="background-color:#fff0f0;">&quot;firstname&quot;</span><span style="color:#007700;">&gt;</span>First name:<span style="color:#007700;">&lt;/label&gt;</span>
  <span style="color:#007700;">&lt;input</span> <span style="color:#0000CC;">type=</span><span style="background-color:#fff0f0;">&quot;text&quot;</span> <span style="color:#0000CC;">name=</span><span style="background-color:#fff0f0;">&quot;firstname&quot;</span> <span style="color:#0000CC;">id=</span><span style="background-color:#fff0f0;">&quot;firstname&quot;</span><span style="color:#007700;">&gt;&lt;br&gt;</span>
  <span style="color:#007700;">&lt;label</span> <span style="color:#0000CC;">for=</span><span style="background-color:#fff0f0;">&quot;lastname&quot;</span><span style="color:#007700;">&gt;</span>Last name:<span style="color:#007700;">&lt;/label&gt;</span>
  <span style="color:#007700;">&lt;input</span> <span style="color:#0000CC;">type=</span><span style="background-color:#fff0f0;">&quot;text&quot;</span> <span style="color:#0000CC;">name=</span><span style="background-color:#fff0f0;">&quot;lastname&quot;</span> <span style="color:#0000CC;">id=</span><span style="background-color:#fff0f0;">&quot;lastname&quot;</span><span style="color:#007700;">&gt;&lt;br&gt;</span>
  <span style="color:#007700;">&lt;input</span> <span style="color:#0000CC;">type=</span><span style="background-color:#fff0f0;">&quot;submit&quot;</span> <span style="color:#0000CC;">value=</span><span style="background-color:#fff0f0;">&quot;Send&quot;</span><span style="color:#007700;">&gt;</span>
<span style="color:#007700;">&lt;/form&gt;</span></pre></div></div><div style="width:49%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@POST</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#333399;font-weight:bold;">void</span> <span style="color:#0066BB;font-weight:bold;">createPerson</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@FormParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;firstname&quot;</span><span style="color:#333333;">)</span> String first<span style="color:#333333;">,</span>
<span style="color:#555555;font-weight:bold;">@FormParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;lastname&quot;</span><span style="color:#333333;">)</span> String last<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
<span style="color:#333333;">...</span>
<span style="color:#333333;">}</span></pre></div></div></div><br><p> Les données de formulaire sont codées en URL lorsqu&#39;elles sont transmises. En utilisant @FormParam, JAX-RS décode automatiquement la valeur de l&#39;entrée du formulaire avant de l&#39;injecter. </p></div>`,2),Eh=[Ch];function kh(e,s){return y(),m("div",Th,Eh)}const Rh=w(Sh,[["render",kh]]),Ah="/rest/assets/mailman-36753933.svg",Bh={},Dh={class:"slide"},Lh=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><div class="flex-container"><div style="width:53%;"><h2>@HeaderParam</h2><br><p> Et si votre application était intéressée par la page web qui renvoie à votre service web ? Vous pouvez accéder à l&#39;en-tête HTTP Referer en utilisant l&#39;annotation @HeaderParam </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GET</span>
<span style="color:#555555;font-weight:bold;">@Produces</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;text/html&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">get</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@HeaderParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;Referer&quot;</span><span style="color:#333333;">)</span> String referer<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
<span style="color:#333333;">...</span>
<span style="color:#333333;">}</span>
</pre></div></div><div style="width:46%;"><img src="`+Ah+'" style="width:100%;"></div></div></div>',2),jh=[Lh];function Ih(e,s){return y(),m("div",Dh,jh)}const Mh=w(Bh,[["render",Ih]]),Oh="/rest/assets/cookies-e709507d.svg",Fh={},Hh={class:"slide"},Nh=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><div class="flex-container"><div style="width:60%;"><h2>@CookieParam</h2><br><p> Les serveurs peuvent stocker des informations d&#39;état dans des cookies sur le client, et peuvent récupérer ces informations lors de la prochaine requête du client. L&#39;annotation @javax.ws.rs.CookieParam vous permet d&#39;injecter les cookies envoyés par une requête client dans vos méthodes JAX-RS. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GET</span>
<span style="color:#555555;font-weight:bold;">@Produces</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;text/html&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">get</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@CookieParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;personId&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> persId<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
<span style="color:#333333;">...</span>
<span style="color:#333333;">}</span>
</pre></div><br><p> L&#39;utilisation de @CookieParam ici fait que le fournisseur JAX-RS recherche la valeur du cookie personId dans tous les en-têtes de cookies </p></div><div style="width:38%;"><img src="`+Oh+'" style="width:100%;"></div></div></div>',2),Jh=[Nh];function zh(e,s){return y(),m("div",Hh,Jh)}const Uh=w(Fh,[["render",zh]]),Uo="/rest/assets/metalbox-b1269b20.svg",Xh={},Wh={class:"slide"},Vh=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><div class="flex-container"><div style="width:65%;"><h2>@BeanParam</h2><br><p> L&#39;annotation @BeanParam est une nouveauté ajoutée dans JAX-RS 2.0 (2011). Elle permet d&#39;injecter une classe spécifique dont les champs/méthodes sont annotés avec l&#39;un des paramètres d&#39;injection. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">PersonInput</span> <span style="color:#333333;">{</span>
	<span style="color:#555555;font-weight:bold;">@FormParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;first&quot;</span><span style="color:#333333;">)</span>
	String firstName<span style="color:#333333;">;</span>
	
	<span style="color:#555555;font-weight:bold;">@FormParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;list&quot;</span><span style="color:#333333;">)</span>
	String lastName<span style="color:#333333;">;</span>
	
	<span style="color:#555555;font-weight:bold;">@HeaderParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;Content-Type&quot;</span><span style="color:#333333;">)</span>
	String contentType<span style="color:#333333;">;</span>

	<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getFirstName</span><span style="color:#333333;">()</span> <span style="color:#333333;">{...}....</span>
<span style="color:#333333;">}</span></pre></div></div><div style="width:30%;"><img src="`+Uo+'" style="width:100%;"></div></div></div>',2),Kh=[Vh];function Gh(e,s){return y(),m("div",Wh,Kh)}const Qh=w(Xh,[["render",Gh]]),Yh={},Zh={class:"slide"},e0=S(`<div class="heading">RESTful - JAX-RS Injection</div><div class="content"><div class="flex-container"><div style="width:65%;"><h2>@BeanParam</h2><br><p> Nous pouvons demander à JAX-RS de créer, d&#39;initialiser et d&#39;injecter cette classe en utilisant l&#39;annotation @BeanParam </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/persons&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">PersonResource</span> <span style="color:#333333;">{</span>
	<span style="color:#555555;font-weight:bold;">@POST</span>
	<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#333399;font-weight:bold;">void</span> <span style="color:#0066BB;font-weight:bold;">createCustomer</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@BeanParam</span> PersonInput newPers<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
	    <span style="color:#333333;">...</span>
	<span style="color:#333333;">}</span>
<span style="color:#333333;">}</span>
</pre></div><br><p> C&#39;est un excellent moyen d&#39;agréger des informations au lieu d&#39;avoir une longue liste de paramètres de méthodes </p></div><div style="width:30%;"><img src="`+Uo+'" style="width:100%;"></div></div></div>',2),s0=[e0];function t0(e,s){return y(),m("div",Zh,s0)}const n0=w(Yh,[["render",t0]]),o0="/rest/assets/chefcake-1d57829a.svg",l0={},r0={class:"slide"},a0=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><div class="flex-container"><div style="width:58%;"><p> Exercice: Pouvez-vous travailler sur PersonResource pour enregistrer l&#39;objet Person désiré dans la console en fonction de l&#39;ID ? (Voir l&#39;exemple de getPersonsList) </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GET</span>
<span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonById</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;id&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">long</span> id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
	Person resultPers <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">null</span><span style="color:#333333;">;</span>
	<span style="color:#888888;">////TODO Mettre en œuvre la méthode getPersonById</span>
	<span style="color:#008800;font-weight:bold;">return</span> resultPers<span style="color:#333333;">.</span><span style="color:#0000CC;">toString</span><span style="color:#333333;">();</span>
<span style="color:#333333;">}</span>
</pre></div><p> vous n&#39;avez pas besoin de toucher aux autres classes et fichiers de configuration pour l&#39;instant. Voyez cela comme un cadeau que je vous fais </p><a href="exercices/rest/jax-rs-exercice-1.zip" download="jax-rs-exercice-1.zip"><img src="`+os+'" style="width:8%;">Download zip exercice</a></div><div style="width:39%;"><img src="'+o0+'" style="width:100%;"></div></div></div>',2),i0=[a0];function c0(e,s){return y(),m("div",r0,i0)}const p0=w(l0,[["render",c0]]),d0={},u0={class:"slide"},f0=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><p> Bonus: Pouvez-vous faire la même chose avec la méthode @POST addPerson. Cette fois, je veux que vous ajoutiez la personne à la liste des personnes et que vous enregistriez la nouvelle personne dans la console. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@POST</span>
<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">addPerson</span><span style="color:#333333;">()</span> <span style="color:#333333;">{</span>
	Person newPers <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">null</span><span style="color:#333333;">;</span>
	<span style="color:#888888;">//TODO Mettre en œuvre la méthode addPerson.</span>
	<span style="color:#888888;">//Adding CORS header for testing. This header should not be in production code</span>
	<span style="color:#008800;font-weight:bold;">return</span> newPers<span style="color:#333333;">.</span><span style="color:#0000CC;">toString</span><span style="color:#333333;">();</span>
<span style="color:#333333;">}</span>
</pre></div><a href="exercices/rest/jax-rs-exercice-1.zip" download="jax-rs-exercice-1.zip"><img src="`+os+'" style="width:8%;">Download zip exercice</a></div>',2),h0=[f0];function y0(e,s){return y(),m("div",u0,h0)}const m0=w(d0,[["render",y0]]),g0={class:"slide"},_0=d("div",{class:"heading"},"RESTful - Réalisation",-1),v0={class:"content"},b0=d("p",null,"Cela permet de tester l'exercice",-1),w0={__name:"SlidePresentation68",setup(e){return(s,t)=>(y(),m("div",g0,[_0,d("div",v0,[b0,f(Pe,{link:"http://localhost:8080/persons"})])]))}},$0={},q0={class:"slide"},P0=S('<div class="heading">RESTful - JAX RS</div><div class="content"><h2>Conversion automatique des types Java</h2><br><p> JAXRS peut convertir des données de type chaîne de caractères en n&#39;importe quel type Java souhaité </p><h3>il doit répondre à l&#39;un des critères suivants :</h3><br><p><span style="font-size:2rem;">↪</span> C&#39;est un type primitif</p><p><span style="font-size:2rem;">↪</span> Classe Java avec un constructeur à paramètre unique de type String </p><p><span style="font-size:2rem;">↪</span> Classe Java qui possède une méthode statique nommée valueOf() avec un seul argument de type String et qui renvoie une instance de la classe </p><p><span style="font-size:2rem;">↪</span> C&#39;est une List ou un Set</p></div>',2),x0=[P0];function S0(e,s){return y(),m("div",q0,x0)}const T0=w($0,[["render",S0]]),C0="/rest/assets/caveman-axe-torch-9c4bd29c.svg",E0={},k0={class:"slide"},R0=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><div class="flex-container"><div style="width:80%;"><h2>Conversion des types primitifs</h2><br><p> Nous avons déjà vu quelques exemples de conversion automatique d&#39;une chaîne de caractères en un type primitif </p><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GET</span>
<span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">get</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;id&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> id<span style="color:#333333;">)</span> <span style="color:#333333;">{...}</span></pre></div></div><div style="width:11%;"><img src="`+C0+'" style="width:100%;"></div></div></div>',2),A0=[R0];function B0(e,s){return y(),m("div",k0,A0)}const D0=w(E0,[["render",B0]]),L0={},j0={class:"slide"},I0=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><h2>Conversion d&#39;objets Java</h2><br><p> La classe de cet objet doit avoir un constructeur ou une méthode statique nommée valueOf() qui prend un seul paramètre de type String </p><div class="flex-container"><div style="width:49%;"><h3>Exemple:</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/myservice&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">MyService</span> <span style="color:#333333;">{</span>
	<span style="color:#555555;font-weight:bold;">@GET</span>
	<span style="color:#555555;font-weight:bold;">@Produces</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;text/html&quot;</span><span style="color:#333333;">)</span>
	<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">get</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@HeaderParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;Referer&quot;</span><span style="color:#333333;">)</span> URL referer<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
	    <span style="color:#333333;">...</span>
	<span style="color:#333333;">}</span>
<span style="color:#333333;">}</span></pre></div></div><div style="width:49%;"><h3>URL constructeur:</h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#888888;">/**</span>
<span style="color:#888888;"> * Creates a {@code URL} object from the {@code String}</span>
<span style="color:#888888;"> * representation.</span>
<span style="color:#888888;"> * ...</span>
<span style="color:#888888;"> */</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#0066BB;font-weight:bold;">URL</span><span style="color:#333333;">(</span>String spec<span style="color:#333333;">)</span> <span style="color:#008800;font-weight:bold;">throws</span> MalformedURLException <span style="color:#333333;">{</span>
	<span style="color:#008800;font-weight:bold;">this</span><span style="color:#333333;">(</span><span style="color:#008800;font-weight:bold;">null</span><span style="color:#333333;">,</span> spec<span style="color:#333333;">);</span>
<span style="color:#333333;">}</span></pre></div></div></div></div>`,2),M0=[I0];function O0(e,s){return y(),m("div",j0,M0)}const F0=w(L0,[["render",O0]]),H0={},N0={class:"slide"},J0=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><h2>Collections</h2><br><p> Nous pouvons avoir une liste des types primitifs ou une liste des classes qui implémentent valueOf() ou avoir un constructeur avec un seul paramètre de type chaîne de caractères sans aucun problème. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/customers&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">CustomerResource</span> <span style="color:#333333;">{</span>
	<span style="color:#555555;font-weight:bold;">@GET</span>
	<span style="color:#555555;font-weight:bold;">@Produces</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;application/xml&quot;</span><span style="color:#333333;">)</span>
	<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getCustomers</span><span style="color:#333333;">(</span>
		<span style="color:#555555;font-weight:bold;">@QueryParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;start&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> start<span style="color:#333333;">,</span>
		<span style="color:#555555;font-weight:bold;">@QueryParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;size&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> size<span style="color:#333333;">,</span>
		<span style="color:#555555;font-weight:bold;">@QueryParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;orderBy&quot;</span><span style="color:#333333;">)</span> List<span style="color:#333333;">&lt;</span>String<span style="color:#333333;">&gt;</span> orderBy<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
			<span style="color:#333333;">...</span>
	<span style="color:#333333;">}</span>
<span style="color:#333333;">}</span>
</pre></div></div>`,2),z0=[J0];function U0(e,s){return y(),m("div",N0,z0)}const X0=w(H0,[["render",U0]]),W0={},V0={class:"slide"},K0=S('<div class="heading">RESTful - JAX RS</div><div class="content"><h2>Manipulateurs de contenu JAX-RS</h2><br><p> JAX-RS vous permet d&#39;organiser des corps de messages vers et depuis des types Java spécifiques. </p><p><span style="font-size:2rem;">↪</span><b>InputStream,Reader: </b> InputStream ou Reader brut pour l&#39;entrée de n&#39;importe quel type de média </p><p><span style="font-size:2rem;">↪</span><b>StreamingOutput:</b>le flux brut des corps de réponse </p><p><span style="font-size:2rem;">↪</span><b>File:</b>utilisé pour l&#39;entrée et la sortie de n&#39;importe quel type de média </p><p><span style="font-size:2rem;">↪</span><b>byte[]:</b>utilisé pour l&#39;entrée et la sortie de n&#39;importe quel type de média &gt; </p><p><span style="font-size:2rem;">↪</span><b>String, char[]: </b>utilisé pour l&#39;entrée et la sortie de n&#39;importe quel type de média &gt; </p></div>',2),G0=[K0];function Q0(e,s){return y(),m("div",V0,G0)}const Y0=w(W0,[["render",Q0]]),Z0={},ey={class:"slide"},sy=S(`<div class="heading">RESTful - JAX RS</div><div class="content"><h2>Manipulateurs de contenu JAX-RS</h2><br><p><span style="font-size:2rem;">↪</span><b>MultivaluedMap et Form Input </b> Les deux sont utilisés pour représenter les données du formulaire. </p><p> Ces deux éléments sont très souvent utilisés, je vais donc en donner un exemple. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@Path</span>(<span style="background-color:#fff0f0;">&quot;/&quot;</span>)
public <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">MyService</span> {
	<span style="color:#555555;font-weight:bold;">@POST</span>
	<span style="color:#555555;font-weight:bold;">@Consumes</span>(<span style="background-color:#fff0f0;">&quot;application/x-www-form-urlencoded&quot;</span>)
	<span style="color:#555555;font-weight:bold;">@Produces</span>(<span style="background-color:#fff0f0;">&quot;application/x-www-form-urlencoded&quot;</span>)
	public MultivaluedMap<span style="color:#333333;">&lt;</span>String,String<span style="color:#333333;">&gt;</span> post(
				MultivaluedMap<span style="color:#333333;">&lt;</span>String, String<span style="color:#333333;">&gt;</span> form) {
		<span style="color:#008800;font-weight:bold;">return</span> form;
	}
}
</pre></div></div>`,2),ty=[sy];function ny(e,s){return y(),m("div",ey,ty)}const oy=w(Z0,[["render",ny]]),ly="/rest/assets/jaxb-2b7e8fab.svg",ry={},ay={class:"slide"},iy=d("div",{class:"heading"},"JAXB",-1),cy=d("div",{class:"content"},[d("p",null," JAXB est une ancienne spécification Java et n'est pas définie par JAX-RS "),d("h3",null,"Il fait correspondre les classes Java à XML"),d("br"),d("img",{src:ly,style:{width:"65%"}}),d("p",null," Cela nous aidera à faire correspondre les entrées et les sorties pour jax-rs ")],-1),py=[iy,cy];function dy(e,s){return y(),m("div",ay,py)}const uy=w(ry,[["render",dy]]),fy={},hy={class:"slide"},yy=S(`<div class="heading">JAXB</div><div class="content"><div class="flex-container"><div style="width:49%;"><h2>Exemple:</h2><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">    <span style="color:#555555;font-weight:bold;">@XmlRootElement</span>(name<span style="color:#333333;">=</span><span style="background-color:#fff0f0;">&quot;customer&quot;</span>)
    <span style="color:#555555;font-weight:bold;">@XmlAccessorType</span>(XmlAccessType<span style="color:#333333;">.</span>FIELD)
    public <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">Customer</span> {
      <span style="color:#555555;font-weight:bold;">@XmlAttribute</span>
      protected <span style="color:#007020;">int</span> <span style="color:#007020;">id</span>;
      
      <span style="color:#555555;font-weight:bold;">@XmlElement</span>
      protected String fullname;
      
      public <span style="color:#007020;">int</span> getId() { <span style="color:#008800;font-weight:bold;">return</span> this<span style="color:#333333;">.</span>id; }
      <span style="color:#333333;">...</span>
    }
    </pre></div></div><div style="width:49%;"><br><p> Si nous devions produire une instance de notre classe Client ayant un identifiant de 42 et un nom de &quot;Kilian Schropp&quot;, le XML produit ressemblerait à ceci </p><h2>Résultat</h2><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#007700;">&lt;customer</span> <span style="color:#0000CC;">id=</span><span style="background-color:#fff0f0;">&quot;42&quot;</span><span style="color:#007700;">&gt;</span>
    <span style="color:#007700;">&lt;fullname&gt;</span>Kilian Schropp<span style="color:#007700;">&lt;/fullname&gt;</span>
<span style="color:#007700;">&lt;/customer&gt;</span>
</pre></div></div></div></div>`,2),my=[yy];function gy(e,s){return y(),m("div",hy,my)}const _y=w(fy,[["render",gy]]),vy={},by={class:"slide"},wy=S(`<div class="heading">JAXB</div><div class="content"><p>J&#39;ai déjà annoté la classe Personne et je l&#39;ai convertie en XML</p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">static</span> <span style="color:#333399;font-weight:bold;">void</span> <span style="color:#0066BB;font-weight:bold;">main</span><span style="color:#333333;">(</span>String<span style="color:#333333;">[]</span> args<span style="color:#333333;">)</span> <span style="color:#008800;font-weight:bold;">throws</span> JAXBException <span style="color:#333333;">{</span>
    Person p <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">new</span> Person<span style="color:#333333;">(</span><span style="color:#0000DD;font-weight:bold;">1L</span><span style="color:#333333;">,</span> <span style="background-color:#fff0f0;">&quot;Kilian&quot;</span><span style="color:#333333;">,</span> <span style="background-color:#fff0f0;">&quot;Schropp&quot;</span><span style="color:#333333;">,</span> <span style="color:#0000DD;font-weight:bold;">28</span> <span style="color:#333333;">);</span>

    JAXBContext context <span style="color:#333333;">=</span> JAXBContext<span style="color:#333333;">.</span><span style="color:#0000CC;">newInstance</span><span style="color:#333333;">(</span>Person<span style="color:#333333;">.</span><span style="color:#0000CC;">class</span><span style="color:#333333;">);</span>
    StringWriter writer <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">new</span> StringWriter<span style="color:#333333;">();</span>
    context<span style="color:#333333;">.</span><span style="color:#0000CC;">createMarshaller</span><span style="color:#333333;">().</span><span style="color:#0000CC;">marshal</span><span style="color:#333333;">(</span>p<span style="color:#333333;">,</span> writer<span style="color:#333333;">);</span>
    String xml <span style="color:#333333;">=</span> writer<span style="color:#333333;">.</span><span style="color:#0000CC;">toString</span><span style="color:#333333;">();</span>
    System<span style="color:#333333;">.</span><span style="color:#0000CC;">out</span><span style="color:#333333;">.</span><span style="color:#0000CC;">println</span><span style="color:#333333;">(</span>xml<span style="color:#333333;">);</span>
<span style="color:#333333;">}</span>
</pre></div><br><h3> Exercice: Pouvez-vous annoter la classe BankAccount et imprimer une instance sur la console ? </h3><br><a href="exercices/jaxb/jaxb-exercice-1.zip" download="jaxb-exercice-1.zip"><img src="`+os+'" style="width:8%;">Download zip exercice</a></div>',2),$y=[wy];function qy(e,s){return y(),m("div",by,$y)}const Py=w(vy,[["render",qy]]),xy={},Sy={class:"slide"},Ty=S(`<div class="heading">JAX-RS et JAXB</div><div class="content"><h2>Manipulateurs JAXB JAX-RS</h2><p> La spécification JAX-RS exige que les implémentations prennent automatiquement en charge le marshalling et le unmarshalling des classes annotées avec JAXB </p><div class="flex-container"><div style="width:49%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GET</span>
<span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#555555;font-weight:bold;">@Produces</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;application/xml&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> Person <span style="color:#0066BB;font-weight:bold;">getPerson</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;id&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
	Person p <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">null</span><span style="color:#333333;">;</span>
	<span style="color:#008800;font-weight:bold;">for</span><span style="color:#333333;">(</span>Person pers <span style="color:#333333;">:</span> PersonList<span style="color:#333333;">.</span><span style="color:#0000CC;">persons</span><span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
		<span style="color:#008800;font-weight:bold;">if</span><span style="color:#333333;">(</span>pers<span style="color:#333333;">.</span><span style="color:#0000CC;">getPersonNum</span><span style="color:#333333;">()</span> <span style="color:#333333;">==</span> id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
			p <span style="color:#333333;">=</span> pers<span style="color:#333333;">;</span>
			<span style="color:#008800;font-weight:bold;">break</span><span style="color:#333333;">;</span>
		<span style="color:#333333;">}</span>
	<span style="color:#333333;">}</span>
	<span style="color:#008800;font-weight:bold;">return</span> p<span style="color:#333333;">;</span>
<span style="color:#333333;">}</span></pre></div></div><div style="width:49%;"><p> A part l&#39;ajout de @Produces(&quot;application/xml&quot;), nous n&#39;avons plus rien à faire. </p><h3> Il transforme automatiquement notre personne en un fichier XML </h3><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#557799;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span>
<span style="color:#007700;">&lt;person</span> <span style="color:#0000CC;">personNum=</span><span style="background-color:#fff0f0;">&quot;1&quot;</span><span style="color:#007700;">&gt;</span>
	<span style="color:#007700;">&lt;firstName&gt;</span>Kilian<span style="color:#007700;">&lt;/firstName&gt;</span>
	<span style="color:#007700;">&lt;lastName&gt;</span>Schropp<span style="color:#007700;">&lt;/lastName&gt;</span>
	<span style="color:#007700;">&lt;age&gt;</span>28<span style="color:#007700;">&lt;/age&gt;</span>
<span style="color:#007700;">&lt;/person&gt;</span></pre></div></div></div></div>`,2),Cy=[Ty];function Ey(e,s){return y(),m("div",Sy,Cy)}const ky=w(xy,[["render",Ey]]),Ry={},Ay={class:"slide"},By=d("div",{class:"heading"},"JAXB",-1),Dy=d("div",{class:"content"},[d("p",null,"J'ai mis en place une fonctionnalité CRUD pour la personne."),d("h3",null,` Exercice: Pouvez-vous créer une BankAccountResource et implémenter les méthodes "getBankAccountById", "getBankAccountList" et "addBankAccount" comme je l'ai fait pour PersonResource ? `),d("br"),d("h3",null," Bonus:Pouvez-vous ajouter les méthodes POST et PUT comme je l'ai fait pour PersonResource dans la nouvelle BankAccountResource ? "),d("a",{href:"exercices/rest/jaxrs-jaxb-exercice-1.zip",download:"jaxrs-jaxb-exercice-1.zip"},[d("img",{src:os,style:{width:"8%"}}),hs("Download zip exercice")])],-1),Ly=[By,Dy];function jy(e,s){return y(),m("div",Ay,Ly)}const Iy=w(Ry,[["render",jy]]),My={},Oy={class:"slide"},Fy=S(`<div class="heading">JAXB et JSON</div><div class="content"><p> JAXB est suffisamment souple pour prendre en charge des formats autres que XML </p><p> Comme nous avons annoté notre classe avec JAXB, nous pouvons déjà transformer les classes en JSON. Tout ce que nous avons à faire est de l&#39;ajouter à l&#39;annotation @Produces </p><div class="flex-container"><div style="width:49%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">    <span style="color:#555555;font-weight:bold;">@GET</span>
    <span style="color:#555555;font-weight:bold;">@Produces</span><span style="color:#333333;">({</span><span style="background-color:#fff0f0;">&quot;application/xml&quot;</span><span style="color:#333333;">,</span> <span style="background-color:#fff0f0;">&quot;application/json&quot;</span><span style="color:#333333;">})</span>
    <span style="color:#008800;font-weight:bold;">public</span> List<span style="color:#333333;">&lt;</span>Person<span style="color:#333333;">&gt;</span> <span style="color:#0066BB;font-weight:bold;">getPersonList</span><span style="color:#333333;">()</span> <span style="color:#333333;">{</span>
      <span style="color:#008800;font-weight:bold;">return</span> PersonList<span style="color:#333333;">.</span><span style="color:#0000CC;">persons</span><span style="color:#333333;">;</span>
    <span style="color:#333333;">}</span>
    </pre></div></div><div style="width:49%;"><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">{
  <span style="color:#007700;">&quot;personNum&quot;</span>: <span style="color:#0000DD;font-weight:bold;">1</span>,
  <span style="color:#007700;">&quot;firstName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Kilian&quot;</span>,
  <span style="color:#007700;">&quot;lastName&quot;</span>: <span style="background-color:#fff0f0;">&quot;Schropp&quot;</span>,
  <span style="color:#007700;">&quot;age&quot;</span>: <span style="color:#0000DD;font-weight:bold;">28</span>
}</pre></div></div></div></div>`,2),Hy=[Fy];function Ny(e,s){return y(),m("div",Oy,Hy)}const Jy=w(My,[["render",Ny]]),zy={class:"slide"},Uy=d("div",{class:"heading"},"JAXB et JSON",-1),Xy={class:"content"},Wy=d("p",null,` Pouvez-vous ajouter l'annotation @Produces({"application/xml", "application/json"}) à l'exercice précédent et tester si cela fonctionne ? `,-1),Vy={__name:"SlidePresentation81",setup(e){return(s,t)=>(y(),m("div",zy,[Uy,d("div",Xy,[Wy,f(Pe,{link:"http://localhost:8080/persons"})])]))}},Ky={},Gy={class:"slide"},Qy=S(`<div class="heading">JAXB et JSON</div><div class="content"><p> Vous vous souvenez de @QueryParam et de la façon dont il permet de réduire la taille des résultats ? </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GET</span>
<span style="color:#555555;font-weight:bold;">@Path</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> String <span style="color:#0066BB;font-weight:bold;">getPersonList</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@QueryParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;start&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> start<span style="color:#333333;">,</span>
<span style="color:#555555;font-weight:bold;">@QueryParam</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;size&quot;</span><span style="color:#333333;">)</span> <span style="color:#333399;font-weight:bold;">int</span> size<span style="color:#333333;">))</span> <span style="color:#333333;">{</span>
    <span style="color:#333333;">...</span>
<span style="color:#333333;">}</span></pre></div><br><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">            GET <span style="color:#333333;">/</span>persons<span style="color:#333333;">?</span>start<span style="color:#333333;">=</span><span style="color:#0000DD;font-weight:bold;">0</span><span style="color:#333333;">&amp;</span>size<span style="color:#333333;">=</span><span style="color:#0000DD;font-weight:bold;">10</span></pre></div></div>`,2),Yy=[Qy];function Zy(e,s){return y(),m("div",Gy,Yy)}const em=w(Ky,[["render",Zy]]),sm={class:"slide"},tm=d("div",{class:"heading"},"JAXB et JSON",-1),nm={class:"content"},om=d("p",null," Pouvez-vous modifier la méthode getPersonList de manière à ce que les paramètres de la requête soient utilisés pour réduire la liste des résultats à seulement 2? ",-1),lm={__name:"SlidePresentation83",setup(e){return(s,t)=>(y(),m("div",sm,[tm,d("div",nm,[om,f(Pe,{link:"http://localhost:8080/persons?start=0&size=2"})])]))}},rm={},am={class:"slide"},im=d("div",{class:"heading"},"JAXB et JSON",-1),cm=d("div",{class:"content"},[d("p",null," Exercice final: Pouvez-vous créer une interface fancy pour les points de terminaison PersonResource et BankAccountResource ? Je souhaite disposer de capacités CRUD de base et d'un affichage sous forme de tableau pour les personnes et les comptes bancaires. ")],-1),pm=[im,cm];function dm(e,s){return y(),m("div",am,pm)}const um=w(rm,[["render",dm]]),fm={},hm={class:"slide"},ym=S('<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>Spring Aperçu</h2><br><p> Le Spring Framework est populaire pour la création d&#39;applications d&#39;entreprise basées sur Java/Java EE. </p><p><span style="font-size:2rem;">↪</span><b>Dependency Injection </b> L&#39;injection de dépendances permet d&#39;injecter des dépendances dans les composants qui en ont besoin. </p><p><span style="font-size:2rem;">↪</span><b>Aspect Oriented Programming </b>L&#39;AOP fournit un mécanisme standardisé pour encapsuler des préoccupations telles que la journalisation, les transactions, les mesures et la sécurité en un seul endroit. Les aspects sont ensuite intégrés dans d&#39;autres objets par un proxy. </p><p><span style="font-size:2rem;">↪</span><b>Spring Web MVC </b> Spring Web MVC est une technologie populaire pour construire des applications basées sur le Web. Elle est basée sur l&#39;architecture modèle-vue-contrôleur. </p></div>',2),mm=[ym];function gm(e,s){return y(),m("div",hm,mm)}const _m=w(fm,[["render",gm]]),vm={},bm={class:"slide"},wm=S(`<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>@RequestBody</h2><br><p> L&#39;annotation @RequestBody associe le corps de la requête HttpRequest à un objet de transfert ou de domaine, ce qui permet une désérialisation automatique. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@PostMapping</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/request&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> ResponseEntity <span style="color:#0066BB;font-weight:bold;">postController</span><span style="color:#333333;">(</span>
  <span style="color:#555555;font-weight:bold;">@RequestBody</span> LoginForm loginForm<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
    <span style="color:#008800;font-weight:bold;">return</span> ResponseEntity<span style="color:#333333;">.</span><span style="color:#0000CC;">ok</span><span style="color:#333333;">(</span>HttpStatus<span style="color:#333333;">.</span><span style="color:#0000CC;">OK</span><span style="color:#333333;">);</span>
<span style="color:#333333;">}</span>
</pre></div><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">LoginForm</span> <span style="color:#333333;">{</span>
    <span style="color:#008800;font-weight:bold;">private</span> String username<span style="color:#333333;">;</span>
    <span style="color:#008800;font-weight:bold;">private</span> String password<span style="color:#333333;">;</span>
    <span style="color:#888888;">// ...</span>
<span style="color:#333333;">}</span>
</pre></div></div>`,2),$m=[wm];function qm(e,s){return y(),m("div",bm,$m)}const Pm=w(vm,[["render",qm]]),xm={},Sm={class:"slide"},Tm=S(`<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>@ResponseBody</h2><br><p> L&#39;annotation @ResponseBody indique à un contrôleur que l&#39;objet renvoyé est automatiquement sérialisé en JSON. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">Person</span><span style="color:#333333;">{</span>
    <span style="color:#008800;font-weight:bold;">private</span> String name<span style="color:#333333;">;</span> 
    <span style="color:#888888;">// standard getters/setters</span>
<span style="color:#333333;">}</span>
</pre></div><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GetMapping</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/person/{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#555555;font-weight:bold;">@ResponseBody</span>
<span style="color:#008800;font-weight:bold;">public</span> Person <span style="color:#0066BB;font-weight:bold;">getPerson</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@RequestBody</span> LoginForm loginForm<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
  <span style="color:#008800;font-weight:bold;">return</span> <span style="color:#008800;font-weight:bold;">new</span> <span style="color:#0066BB;font-weight:bold;">Person</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;ton nom&quot;</span><span style="color:#333333;">);</span>
<span style="color:#333333;">}</span>
</pre></div><p>Resultat:</p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;">{<span style="color:#007700;">&quot;nom&quot;</span>:<span style="background-color:#fff0f0;">&quot;ton nom&quot;</span>}
</pre></div></div>`,2),Cm=[Tm];function Em(e,s){return y(),m("div",Sm,Cm)}const km=w(xm,[["render",Em]]),Rm={},Am={class:"slide"},Bm=S(`<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>@RestController</h2><br><p> @RestController est une version spécialisée du contrôleur. Il inclut les annotations @Controller et @ResponseBody, ce qui simplifie la mise en œuvre du contrôleur. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@RestController</span>
<span style="color:#555555;font-weight:bold;">@RequestMapping</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;books&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#008800;font-weight:bold;">class</span> <span style="color:#BB0066;font-weight:bold;">SimpleBookRestController</span> <span style="color:#333333;">{</span>
    
    <span style="color:#555555;font-weight:bold;">@GetMapping</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/{id}&quot;</span><span style="color:#333333;">)</span>
    <span style="color:#008800;font-weight:bold;">public</span> Book <span style="color:#0066BB;font-weight:bold;">getBook</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathVariable</span> <span style="color:#333399;font-weight:bold;">int</span> id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
        <span style="color:#008800;font-weight:bold;">return</span> <span style="color:#0066BB;font-weight:bold;">findBookById</span><span style="color:#333333;">(</span>id<span style="color:#333333;">);</span>
    <span style="color:#333333;">}</span>
<span style="color:#333333;">}</span>
</pre></div><p>Remarquez que nous n&#39;avons plus besoin d&#39;utiliser @ResponseBody</p></div>`,2),Dm=[Bm];function Lm(e,s){return y(),m("div",Am,Dm)}const jm=w(Rm,[["render",Lm]]),Im={},Mm={class:"slide"},Om=S(`<div class="heading"> RESTful - Spring comme alternative - Méthodes HTTP </div><div class="content"><p> traditionnellement, si nous voulons mettre en œuvre le gestionnaire d&#39;URL en utilisant l&#39;annotation @RequestMapping, cela aurait été quelque chose comme ceci : </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@RequestMapping</span><span style="color:#333333;">(</span>value <span style="color:#333333;">=</span> <span style="background-color:#fff0f0;">&quot;/get/{id}&quot;</span><span style="color:#333333;">,</span> method <span style="color:#333333;">=</span> RequestMethod<span style="color:#333333;">.</span><span style="color:#0000CC;">GET</span><span style="color:#333333;">)</span>
</pre></div><p>L&#39;approche la plus récente permet d&#39;abréger le tout :</p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GetMapping</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/get/{id}&quot;</span><span style="color:#333333;">)</span>
</pre></div><p> Spring supporte actuellement les méthodes de requête HTTP GET, POST, PUT, DELETE et PATCH. </p><p><b>@GetMapping: </b></p><p><b>@PostMapping: </b></p><p><b>@PutMapping: </b></p><p><b>@DeleteMapping: </b></p><p><b>@PatchMapping: </b></p></div>`,2),Fm=[Om];function Hm(e,s){return y(),m("div",Mm,Fm)}const Nm=w(Im,[["render",Hm]]),Jm={},zm={class:"slide"},Um=S(`<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>@GetMapping</h2><br><p> Les méthodes annotées @GetMapping traitent les requêtes HTTP GET correspondant à l&#39;expression URI donnée. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GetMapping</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/person/{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#555555;font-weight:bold;">@ResponseBody</span>
<span style="color:#008800;font-weight:bold;">public</span> Person <span style="color:#0066BB;font-weight:bold;">findById</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathVariable</span> <span style="color:#008800;font-weight:bold;">final</span> <span style="color:#333399;font-weight:bold;">int</span> id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
  <span style="color:#008800;font-weight:bold;">return</span> personRepository<span style="color:#333333;">.</span><span style="color:#0000CC;">get</span><span style="color:#333333;">(</span>id<span style="color:#333333;">);</span>
<span style="color:#333333;">}</span>
</pre></div></div>`,2),Xm=[Um];function Wm(e,s){return y(),m("div",zm,Xm)}const Vm=w(Jm,[["render",Wm]]),Km={},Gm={class:"slide"},Qm=S(`<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>@PostMapping</h2><br><p> L&#39;annotation @PostMapping est une version spécialisée de l&#39;annotation @RequestMapping qui agit comme un raccourci pour @RequestMapping(method = RequestMethod.POST). </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@PostMapping</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/person&quot;</span><span style="color:#333333;">)</span>
<span style="color:#555555;font-weight:bold;">@ResponseStatus</span><span style="color:#333333;">(</span>HttpStatus<span style="color:#333333;">.</span><span style="color:#0000CC;">OK</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#333399;font-weight:bold;">boolean</span> <span style="color:#0066BB;font-weight:bold;">insertPerson</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@RequestBody</span> <span style="color:#008800;font-weight:bold;">final</span> Person person<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
  <span style="color:#008800;font-weight:bold;">return</span> personRepository<span style="color:#333333;">.</span><span style="color:#0000CC;">add</span><span style="color:#333333;">(</span>person<span style="color:#333333;">);</span>
<span style="color:#333333;">}</span>
</pre></div></div>`,2),Ym=[Qm];function Zm(e,s){return y(),m("div",Gm,Ym)}const eg=w(Km,[["render",Zm]]),sg={},tg={class:"slide"},ng=S(`<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>@DeleteMapping</h2><br><p> L&#39;annotation @DeleteMapping associe les requêtes HTTP DELETE à des méthodes de traitement spécifiques. Il s&#39;agit d&#39;une annotation composée qui agit comme un raccourci pour @RequestMapping(method = RequestMethod.DELETE). </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@DeleteMapping</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;/person/{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#333399;font-weight:bold;">void</span> <span style="color:#0066BB;font-weight:bold;">deletePerson</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathVariable</span> String id<span style="color:#333333;">){</span>
  <span style="color:#008800;font-weight:bold;">return</span> personRepository<span style="color:#333333;">.</span><span style="color:#0000CC;">delete</span><span style="color:#333333;">(</span>person<span style="color:#333333;">);</span>
<span style="color:#333333;">}</span>
</pre></div></div>`,2),og=[ng];function lg(e,s){return y(),m("div",tg,og)}const rg=w(sg,[["render",lg]]),ag={},ig={class:"slide"},cg=S(`<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>@PutMapping</h2><br><p> @PutMapping est une annotation composée qui agit comme un raccourci pour @RequestMapping(method = RequestMethod.PUT) </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@PutMapping</span><span style="color:#333333;">(</span>value <span style="color:#333333;">=</span> <span style="background-color:#fff0f0;">&quot;persons/{id}&quot;</span><span style="color:#333333;">)</span>
<span style="color:#555555;font-weight:bold;">@ResponseStatus</span><span style="color:#333333;">(</span>HttpStatus<span style="color:#333333;">.</span><span style="color:#0000CC;">OK</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> <span style="color:#333399;font-weight:bold;">void</span> <span style="color:#0066BB;font-weight:bold;">update</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathVariable</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;id&quot;</span><span style="color:#333333;">)</span> Integer id<span style="color:#333333;">,</span> <span style="color:#555555;font-weight:bold;">@RequestBody</span> Person resource<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
  personRepository<span style="color:#333333;">.</span><span style="color:#0000CC;">update</span><span style="color:#333333;">(</span>resource<span style="color:#333333;">);</span>	
<span style="color:#333333;">}</span>
</pre></div></div>`,2),pg=[cg];function dg(e,s){return y(),m("div",ig,pg)}const ug=w(ag,[["render",dg]]),fg={},hg={class:"slide"},yg=S(`<div class="heading">RESTful - Spring comme alternative</div><div class="content"><h2>Définition du type de contenu</h2><br><p> Si nous voulons modifier le type de contenu de la réponse, nous pouvons utiliser l&#39;attribut produces. </p><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:0.1em 0.1em 0.1em 0.8em;padding:0.2em 0.6em;"><pre style="margin:0;line-height:125%;"><span style="color:#555555;font-weight:bold;">@GetMapping</span><span style="color:#333333;">(</span>value<span style="color:#333333;">=</span><span style="background-color:#fff0f0;">&quot;/{id}&quot;</span><span style="color:#333333;">,</span> produces <span style="color:#333333;">=</span> MediaType<span style="color:#333333;">.</span><span style="color:#0000CC;">APPLICATION_JSON_VALUE</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> Person <span style="color:#0066BB;font-weight:bold;">findByIdJson</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathVariable</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;id&quot;</span><span style="color:#333333;">)</span> Integer id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
  <span style="color:#008800;font-weight:bold;">return</span> service<span style="color:#333333;">.</span><span style="color:#0000CC;">findById</span><span style="color:#333333;">(</span>id<span style="color:#333333;">);</span>
<span style="color:#333333;">}</span>

<span style="color:#555555;font-weight:bold;">@GetMapping</span><span style="color:#333333;">(</span>value<span style="color:#333333;">=</span><span style="background-color:#fff0f0;">&quot;/{id}&quot;</span><span style="color:#333333;">,</span> produces <span style="color:#333333;">=</span> MediaType<span style="color:#333333;">.</span><span style="color:#0000CC;">APPLICATION_XML_VALUE</span><span style="color:#333333;">)</span>
<span style="color:#008800;font-weight:bold;">public</span> Person <span style="color:#0066BB;font-weight:bold;">findByIdXml</span><span style="color:#333333;">(</span><span style="color:#555555;font-weight:bold;">@PathVariable</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&quot;id&quot;</span><span style="color:#333333;">)</span> Integer id<span style="color:#333333;">)</span> <span style="color:#333333;">{</span>
  <span style="color:#008800;font-weight:bold;">return</span> service<span style="color:#333333;">.</span><span style="color:#0000CC;">findById</span><span style="color:#333333;">(</span>id<span style="color:#333333;">);</span>
<span style="color:#333333;">}</span>
</pre></div></div>`,2),mg=[yg];function gg(e,s){return y(),m("div",hg,mg)}const _g=w(fg,[["render",gg]]),vg={},bg={class:"slide"},wg=S('<div class="heading">JAX-RS vs Spring</div><div class="content"><div class="flex-container"><div style="width:49%;"><h2>JAX-RS</h2><br><h3>pro</h3><br><p><span style="font-size:2rem;">↪</span><b>Pas de Enfermement propriétaire (Vendor lock-in)</b> JAX-RS n&#39;est qu&#39;une spécification et peut être réalisé avec des implémentations telles que RESTeasy ou Jersey. </p><p><span style="font-size:2rem;">↪</span><b>Accept : application/json ou xml</b> la définition du type de contenu ne nécessite qu&#39;une seule méthode </p><p></p></div><div style="width:49%;"><h2>Spring</h2><br><h3>pro</h3><br><p><span style="font-size:2rem;">↪</span><b>Simple</b> C&#39;est plus facile de faire fonctionner le composant REST une fois que le Spring Boot est mis en place </p></div></div></div>',2),$g=[wg];function qg(e,s){return y(),m("div",bg,$g)}const Pg=w(vg,[["render",qg]]),xg={},Sg={class:"slide"},Tg=d("div",{class:"heading"},"RESTful - Spring comme alternative",-1),Cg=d("div",{class:"content"},[d("h2",null,"Exercice"),d("br"),d("p",null,"Implémenter les méthodes POST, PUT, DELETE et GET by ID."),d("p",null," Voici un projet Java avec Spring Boot mis en place mais la PersonResource doit être implémentée. "),d("a",{href:"exercices/spring/spring-rest-exercice.zip",download:"jaxrs-jaxb-exercice-1.zip"},[d("img",{src:os,style:{width:"8%"}}),hs("Download zip exemple")])],-1),Eg=[Tg,Cg];function kg(e,s){return y(),m("div",Sg,Eg)}const Rg=w(xg,[["render",kg]]),Ag={},Bg={class:"slide"},Dg=d("div",{class:"heading"},"RESTful - Spring comme alternative",-1),Lg=d("div",{class:"content"},[d("h2",null,"Voici un exemple de mise en œuvre"),d("br"),d("a",{href:"exercices/spring/spring-rest-exemple.zip",download:"jaxrs-jaxb-exercice-1.zip"},[d("img",{src:os,style:{width:"8%"}}),hs("Download zip exemple")])],-1),jg=[Dg,Lg];function Ig(e,s){return y(),m("div",Bg,jg)}const Mg=w(Ag,[["render",Ig]]),Og={class:"container"},Fg=d("img",{src:Ba,class:"logo"},null,-1),Hg={id:"presentation-area"},Ng={class:"presentation"},Jg=S('<section class="counter"><input type="number" id="index" name="index" min="1" max="96" value="1" style="width:40%;"> of 96 </section><section class="navigation"><button id="full-screen" class="btn-screen show"><span><b>⛶</b></span></button><button id="small-screen" class="btn-screen"><span><b>✖</b></span></button><button id="left-btn" class="btn"><span>❮</span></button><button id="right-btn" class="btn"><span>❯</span></button></section>',2),zg=d("footer",null,[d("p",null,"Created by Kilian Schropp. ©C2LR 2023")],-1),Ug={__name:"App",setup(e){return(s,t)=>(y(),m("body",null,[d("div",Og,[Fg,d("div",Hg,[d("section",Ng,[f(Oa),f(Wa),f(si),f(ci),f(mi),f(Pi),f(ki),f(ji),f(Ni),f(Vi),f(ec),f(jc),f(zc),f(Qc),f(lp),f(fp),f(bp),f(Tp),f(Ap),f(Ip),f(Jp),f(Kp),f(sd),f(rd),f(fd),f(_d),f(xd),f(Rd),f(Md),f(Ud),f(Yd),f(l3),f(u3),f(v3),f(S3),f(B3),f(F3),f(W3),f(eu),f(au),f(hu),f(wu),f(Tu),f(Bu),f(Ou),f(Uu),f(Gu),f(sf),f(rf),f(hf),f(bf),f(Sf),f(Af),f(Mf),f(Uf),f(Yf),f(lh),f(uh),f(vh),f(xh),f(Rh),f(Mh),f(Uh),f(Qh),f(n0),f(p0),f(m0),f(w0),f(T0),f(D0),f(F0),f(X0),f(Y0),f(oy),f(uy),f(_y),f(Py),f(ky),f(Iy),f(Jy),f(Vy),f(em),f(lm),f(um),f(_m),f(Pm),f(km),f(jm),f(Nm),f(Vm),f(eg),f(rg),f(ug),f(_g),f(Pg),f(Rg),f(Mg)]),Jg])]),zg]))}};Ra(Ug).mount("#app");let cn=document.querySelectorAll(".slide"),pe=document.querySelector(".slide.show");var Zs=document.querySelector("#index"),Ft=document.querySelector("#left-btn"),Ht=document.querySelector("#right-btn");let Xo=document.querySelector("#presentation-area");var pn=document.querySelector("#full-screen"),dn=document.querySelector("#small-screen"),ht=1,un=0;yt();function yt(){Gg(),un=cn.length,Zg(),Xg(),Wg()}Ft.addEventListener("click",Vg);Ht.addEventListener("click",Kg);Zs.addEventListener("change",e_);pn.addEventListener("click",Qg);dn.addEventListener("click",Yg);function Xg(){ht==1?Ft.classList.remove("show"):Ft.classList.add("show")}function Wg(){ht===un?Ht.classList.remove("show"):Ht.classList.add("show")}function Vg(){var e=pe;pe=pe.previousElementSibling,e.classList.remove("show"),pe.classList.add("show"),yt(),fn(pe)}function Kg(){var e=pe;pe=pe.nextElementSibling,e.classList.remove("show"),pe.classList.add("show"),yt(),fn(pe)}function Gg(){let e=0;cn.forEach(s=>{e++,s.classList.contains("show")&&(ht=e)})}function Qg(){Xo.classList.add("full-screen"),pn.classList.remove("show"),dn.classList.add("show")}function Yg(){Xo.classList.remove("full-screen"),pn.classList.add("show"),dn.classList.remove("show")}function Zg(){Zs.value=ht,Zs.innerText=` of ${un}`}function e_(){var e=pe;pe=cn[Zs.value-1],e.classList.remove("show"),pe.classList.add("show"),yt(),fn(pe)}function fn(e){const s=e.getElementsByTagName("iframe")[0];if(s!=null){const t=s.parentElement;console.log(s.src),t!==void 0&&t.hasAttribute("data-link")&&s.src.includes("lightswitch")&&s.setAttribute("src",t.dataset.link)}}
